/**
 * Autogenerated by Thrift Compiler (0.9.0)
 * 
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * 
 * @generated
 */
package org.waarp.thrift.r66;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class R66Result implements org.apache.thrift.TBase<R66Result, R66Result._Fields>,
		java.io.Serializable, Cloneable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 2232890139671363595L;

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"R66Result");

	private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"mode", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField FROMUID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"fromuid", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField DESTUID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"destuid", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField FILE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"file", org.apache.thrift.protocol.TType.STRING, (short) 4);
	private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"rule", org.apache.thrift.protocol.TType.STRING, (short) 5);
	private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"tid", org.apache.thrift.protocol.TType.I64, (short) 20);
	private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"action", org.apache.thrift.protocol.TType.I32, (short) 21);
	private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"code", org.apache.thrift.protocol.TType.I32, (short) 30);
	private static final org.apache.thrift.protocol.TField RESULTINFO_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"resultinfo", org.apache.thrift.protocol.TType.STRING, (short) 31);
	private static final org.apache.thrift.protocol.TField GLOBALSTEP_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"globalstep", org.apache.thrift.protocol.TType.I32, (short) 32);
	private static final org.apache.thrift.protocol.TField GLOBALLASTSTEP_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"globallaststep", org.apache.thrift.protocol.TType.I32, (short) 33);
	private static final org.apache.thrift.protocol.TField STEP_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"step", org.apache.thrift.protocol.TType.I32, (short) 34);
	private static final org.apache.thrift.protocol.TField RANK_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"rank", org.apache.thrift.protocol.TType.I32, (short) 35);
	private static final org.apache.thrift.protocol.TField RETRIEVEMODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"retrievemode", org.apache.thrift.protocol.TType.BOOL, (short) 36);
	private static final org.apache.thrift.protocol.TField ISMOVED_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"ismoved", org.apache.thrift.protocol.TType.BOOL, (short) 37);
	private static final org.apache.thrift.protocol.TField ORIGINALFILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"originalfilename", org.apache.thrift.protocol.TType.STRING, (short) 38);
	private static final org.apache.thrift.protocol.TField BLOCKSIZE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"blocksize", org.apache.thrift.protocol.TType.I32, (short) 39);
	private static final org.apache.thrift.protocol.TField MODETRANSFER_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"modetransfer", org.apache.thrift.protocol.TType.I32, (short) 40);
	private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"start", org.apache.thrift.protocol.TType.STRING, (short) 41);
	private static final org.apache.thrift.protocol.TField STOP_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"stop", org.apache.thrift.protocol.TType.STRING, (short) 42);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new R66ResultStandardSchemeFactory());
		schemes.put(TupleScheme.class, new R66ResultTupleSchemeFactory());
	}

	private RequestMode mode; // required
	private String fromuid; // optional
	private String destuid; // optional
	private String file; // optional
	private String rule; // optional
	private long tid; // optional
	private Action action; // optional
	private ErrorCode code; // required
	private String resultinfo; // required
	private int globalstep; // optional
	private int globallaststep; // optional
	private int step; // optional
	private int rank; // optional
	private boolean retrievemode; // optional
	private boolean ismoved; // optional
	private String originalfilename; // optional
	private int blocksize; // optional
	private int modetransfer; // optional
	private String start; // optional
	private String stop; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding and
	 * manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		/**
		 * 
		 * @see RequestMode
		 */
		MODE((short) 1, "mode"),
		FROMUID((short) 2, "fromuid"),
		DESTUID((short) 3, "destuid"),
		FILE((short) 4, "file"),
		RULE((short) 5, "rule"),
		TID((short) 20, "tid"),
		/**
		 * 
		 * @see Action
		 */
		ACTION((short) 21, "action"),
		/**
		 * 
		 * @see ErrorCode
		 */
		CODE((short) 30, "code"),
		RESULTINFO((short) 31, "resultinfo"),
		GLOBALSTEP((short) 32, "globalstep"),
		GLOBALLASTSTEP((short) 33, "globallaststep"),
		STEP((short) 34, "step"),
		RANK((short) 35, "rank"),
		RETRIEVEMODE((short) 36, "retrievemode"),
		ISMOVED((short) 37, "ismoved"),
		ORIGINALFILENAME((short) 38, "originalfilename"),
		BLOCKSIZE((short) 39, "blocksize"),
		MODETRANSFER((short) 40, "modetransfer"),
		START((short) 41, "start"),
		STOP((short) 42, "stop");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
				case 1: // MODE
					return MODE;
				case 2: // FROMUID
					return FROMUID;
				case 3: // DESTUID
					return DESTUID;
				case 4: // FILE
					return FILE;
				case 5: // RULE
					return RULE;
				case 20: // TID
					return TID;
				case 21: // ACTION
					return ACTION;
				case 30: // CODE
					return CODE;
				case 31: // RESULTINFO
					return RESULTINFO;
				case 32: // GLOBALSTEP
					return GLOBALSTEP;
				case 33: // GLOBALLASTSTEP
					return GLOBALLASTSTEP;
				case 34: // STEP
					return STEP;
				case 35: // RANK
					return RANK;
				case 36: // RETRIEVEMODE
					return RETRIEVEMODE;
				case 37: // ISMOVED
					return ISMOVED;
				case 38: // ORIGINALFILENAME
					return ORIGINALFILENAME;
				case 39: // BLOCKSIZE
					return BLOCKSIZE;
				case 40: // MODETRANSFER
					return MODETRANSFER;
				case 41: // START
					return START;
				case 42: // STOP
					return STOP;
				default:
					return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __TID_ISSET_ID = 0;
	private static final int __GLOBALSTEP_ISSET_ID = 1;
	private static final int __GLOBALLASTSTEP_ISSET_ID = 2;
	private static final int __STEP_ISSET_ID = 3;
	private static final int __RANK_ISSET_ID = 4;
	private static final int __RETRIEVEMODE_ISSET_ID = 5;
	private static final int __ISMOVED_ISSET_ID = 6;
	private static final int __BLOCKSIZE_ISSET_ID = 7;
	private static final int __MODETRANSFER_ISSET_ID = 8;
	private short __isset_bitfield = 0;
	private _Fields optionals[] = { _Fields.FROMUID, _Fields.DESTUID, _Fields.FILE, _Fields.RULE,
			_Fields.TID, _Fields.ACTION, _Fields.GLOBALSTEP, _Fields.GLOBALLASTSTEP, _Fields.STEP,
			_Fields.RANK, _Fields.RETRIEVEMODE, _Fields.ISMOVED, _Fields.ORIGINALFILENAME,
			_Fields.BLOCKSIZE, _Fields.MODETRANSFER, _Fields.START, _Fields.STOP };
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode",
				org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM,
						RequestMode.class)));
		tmpMap.put(_Fields.FROMUID, new org.apache.thrift.meta_data.FieldMetaData("fromuid",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DESTUID, new org.apache.thrift.meta_data.FieldMetaData("destuid",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.FILE, new org.apache.thrift.meta_data.FieldMetaData("file",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM,
						Action.class)));
		tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code",
				org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM,
						ErrorCode.class)));
		tmpMap.put(_Fields.RESULTINFO, new org.apache.thrift.meta_data.FieldMetaData("resultinfo",
				org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.GLOBALSTEP, new org.apache.thrift.meta_data.FieldMetaData("globalstep",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.GLOBALLASTSTEP, new org.apache.thrift.meta_data.FieldMetaData(
				"globallaststep", org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.STEP, new org.apache.thrift.meta_data.FieldMetaData("step",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.RANK, new org.apache.thrift.meta_data.FieldMetaData("rank",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.RETRIEVEMODE, new org.apache.thrift.meta_data.FieldMetaData(
				"retrievemode", org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.ISMOVED, new org.apache.thrift.meta_data.FieldMetaData("ismoved",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.ORIGINALFILENAME, new org.apache.thrift.meta_data.FieldMetaData(
				"originalfilename", org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.BLOCKSIZE, new org.apache.thrift.meta_data.FieldMetaData("blocksize",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.MODETRANSFER, new org.apache.thrift.meta_data.FieldMetaData(
				"modetransfer", org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.STOP, new org.apache.thrift.meta_data.FieldMetaData("stop",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData
				.addStructMetaDataMap(R66Result.class, metaDataMap);
	}

	public R66Result() {
	}

	public R66Result(
			RequestMode mode,
			ErrorCode code,
			String resultinfo)
	{
		this();
		this.mode = mode;
		this.code = code;
		this.resultinfo = resultinfo;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public R66Result(R66Result other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetMode()) {
			this.mode = other.mode;
		}
		if (other.isSetFromuid()) {
			this.fromuid = other.fromuid;
		}
		if (other.isSetDestuid()) {
			this.destuid = other.destuid;
		}
		if (other.isSetFile()) {
			this.file = other.file;
		}
		if (other.isSetRule()) {
			this.rule = other.rule;
		}
		this.tid = other.tid;
		if (other.isSetAction()) {
			this.action = other.action;
		}
		if (other.isSetCode()) {
			this.code = other.code;
		}
		if (other.isSetResultinfo()) {
			this.resultinfo = other.resultinfo;
		}
		this.globalstep = other.globalstep;
		this.globallaststep = other.globallaststep;
		this.step = other.step;
		this.rank = other.rank;
		this.retrievemode = other.retrievemode;
		this.ismoved = other.ismoved;
		if (other.isSetOriginalfilename()) {
			this.originalfilename = other.originalfilename;
		}
		this.blocksize = other.blocksize;
		this.modetransfer = other.modetransfer;
		if (other.isSetStart()) {
			this.start = other.start;
		}
		if (other.isSetStop()) {
			this.stop = other.stop;
		}
	}

	public R66Result deepCopy() {
		return new R66Result(this);
	}

	@Override
	public void clear() {
		this.mode = null;
		this.fromuid = null;
		this.destuid = null;
		this.file = null;
		this.rule = null;
		setTidIsSet(false);
		this.tid = 0;
		this.action = null;
		this.code = null;
		this.resultinfo = null;
		setGlobalstepIsSet(false);
		this.globalstep = 0;
		setGloballaststepIsSet(false);
		this.globallaststep = 0;
		setStepIsSet(false);
		this.step = 0;
		setRankIsSet(false);
		this.rank = 0;
		setRetrievemodeIsSet(false);
		this.retrievemode = false;
		setIsmovedIsSet(false);
		this.ismoved = false;
		this.originalfilename = null;
		setBlocksizeIsSet(false);
		this.blocksize = 0;
		setModetransferIsSet(false);
		this.modetransfer = 0;
		this.start = null;
		this.stop = null;
	}

	/**
	 * 
	 * @see RequestMode
	 */
	public RequestMode getMode() {
		return this.mode;
	}

	/**
	 * 
	 * @see RequestMode
	 */
	public R66Result setMode(RequestMode mode) {
		this.mode = mode;
		return this;
	}

	public void unsetMode() {
		this.mode = null;
	}

	/** Returns true if field mode is set (has been assigned a value) and false otherwise */
	public boolean isSetMode() {
		return this.mode != null;
	}

	public void setModeIsSet(boolean value) {
		if (!value) {
			this.mode = null;
		}
	}

	public String getFromuid() {
		return this.fromuid;
	}

	public R66Result setFromuid(String fromuid) {
		this.fromuid = fromuid;
		return this;
	}

	public void unsetFromuid() {
		this.fromuid = null;
	}

	/** Returns true if field fromuid is set (has been assigned a value) and false otherwise */
	public boolean isSetFromuid() {
		return this.fromuid != null;
	}

	public void setFromuidIsSet(boolean value) {
		if (!value) {
			this.fromuid = null;
		}
	}

	public String getDestuid() {
		return this.destuid;
	}

	public R66Result setDestuid(String destuid) {
		this.destuid = destuid;
		return this;
	}

	public void unsetDestuid() {
		this.destuid = null;
	}

	/** Returns true if field destuid is set (has been assigned a value) and false otherwise */
	public boolean isSetDestuid() {
		return this.destuid != null;
	}

	public void setDestuidIsSet(boolean value) {
		if (!value) {
			this.destuid = null;
		}
	}

	public String getFile() {
		return this.file;
	}

	public R66Result setFile(String file) {
		this.file = file;
		return this;
	}

	public void unsetFile() {
		this.file = null;
	}

	/** Returns true if field file is set (has been assigned a value) and false otherwise */
	public boolean isSetFile() {
		return this.file != null;
	}

	public void setFileIsSet(boolean value) {
		if (!value) {
			this.file = null;
		}
	}

	public String getRule() {
		return this.rule;
	}

	public R66Result setRule(String rule) {
		this.rule = rule;
		return this;
	}

	public void unsetRule() {
		this.rule = null;
	}

	/** Returns true if field rule is set (has been assigned a value) and false otherwise */
	public boolean isSetRule() {
		return this.rule != null;
	}

	public void setRuleIsSet(boolean value) {
		if (!value) {
			this.rule = null;
		}
	}

	public long getTid() {
		return this.tid;
	}

	public R66Result setTid(long tid) {
		this.tid = tid;
		setTidIsSet(true);
		return this;
	}

	public void unsetTid() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TID_ISSET_ID);
	}

	/** Returns true if field tid is set (has been assigned a value) and false otherwise */
	public boolean isSetTid() {
		return EncodingUtils.testBit(__isset_bitfield, __TID_ISSET_ID);
	}

	public void setTidIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TID_ISSET_ID, value);
	}

	/**
	 * 
	 * @see Action
	 */
	public Action getAction() {
		return this.action;
	}

	/**
	 * 
	 * @see Action
	 */
	public R66Result setAction(Action action) {
		this.action = action;
		return this;
	}

	public void unsetAction() {
		this.action = null;
	}

	/** Returns true if field action is set (has been assigned a value) and false otherwise */
	public boolean isSetAction() {
		return this.action != null;
	}

	public void setActionIsSet(boolean value) {
		if (!value) {
			this.action = null;
		}
	}

	/**
	 * 
	 * @see ErrorCode
	 */
	public ErrorCode getCode() {
		return this.code;
	}

	/**
	 * 
	 * @see ErrorCode
	 */
	public R66Result setCode(ErrorCode code) {
		this.code = code;
		return this;
	}

	public void unsetCode() {
		this.code = null;
	}

	/** Returns true if field code is set (has been assigned a value) and false otherwise */
	public boolean isSetCode() {
		return this.code != null;
	}

	public void setCodeIsSet(boolean value) {
		if (!value) {
			this.code = null;
		}
	}

	public String getResultinfo() {
		return this.resultinfo;
	}

	public R66Result setResultinfo(String resultinfo) {
		this.resultinfo = resultinfo;
		return this;
	}

	public void unsetResultinfo() {
		this.resultinfo = null;
	}

	/** Returns true if field resultinfo is set (has been assigned a value) and false otherwise */
	public boolean isSetResultinfo() {
		return this.resultinfo != null;
	}

	public void setResultinfoIsSet(boolean value) {
		if (!value) {
			this.resultinfo = null;
		}
	}

	public int getGlobalstep() {
		return this.globalstep;
	}

	public R66Result setGlobalstep(int globalstep) {
		this.globalstep = globalstep;
		setGlobalstepIsSet(true);
		return this;
	}

	public void unsetGlobalstep() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GLOBALSTEP_ISSET_ID);
	}

	/** Returns true if field globalstep is set (has been assigned a value) and false otherwise */
	public boolean isSetGlobalstep() {
		return EncodingUtils.testBit(__isset_bitfield, __GLOBALSTEP_ISSET_ID);
	}

	public void setGlobalstepIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GLOBALSTEP_ISSET_ID, value);
	}

	public int getGloballaststep() {
		return this.globallaststep;
	}

	public R66Result setGloballaststep(int globallaststep) {
		this.globallaststep = globallaststep;
		setGloballaststepIsSet(true);
		return this;
	}

	public void unsetGloballaststep() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GLOBALLASTSTEP_ISSET_ID);
	}

	/** Returns true if field globallaststep is set (has been assigned a value) and false otherwise */
	public boolean isSetGloballaststep() {
		return EncodingUtils.testBit(__isset_bitfield, __GLOBALLASTSTEP_ISSET_ID);
	}

	public void setGloballaststepIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GLOBALLASTSTEP_ISSET_ID, value);
	}

	public int getStep() {
		return this.step;
	}

	public R66Result setStep(int step) {
		this.step = step;
		setStepIsSet(true);
		return this;
	}

	public void unsetStep() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STEP_ISSET_ID);
	}

	/** Returns true if field step is set (has been assigned a value) and false otherwise */
	public boolean isSetStep() {
		return EncodingUtils.testBit(__isset_bitfield, __STEP_ISSET_ID);
	}

	public void setStepIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STEP_ISSET_ID, value);
	}

	public int getRank() {
		return this.rank;
	}

	public R66Result setRank(int rank) {
		this.rank = rank;
		setRankIsSet(true);
		return this;
	}

	public void unsetRank() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANK_ISSET_ID);
	}

	/** Returns true if field rank is set (has been assigned a value) and false otherwise */
	public boolean isSetRank() {
		return EncodingUtils.testBit(__isset_bitfield, __RANK_ISSET_ID);
	}

	public void setRankIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANK_ISSET_ID, value);
	}

	public boolean isRetrievemode() {
		return this.retrievemode;
	}

	public R66Result setRetrievemode(boolean retrievemode) {
		this.retrievemode = retrievemode;
		setRetrievemodeIsSet(true);
		return this;
	}

	public void unsetRetrievemode() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETRIEVEMODE_ISSET_ID);
	}

	/** Returns true if field retrievemode is set (has been assigned a value) and false otherwise */
	public boolean isSetRetrievemode() {
		return EncodingUtils.testBit(__isset_bitfield, __RETRIEVEMODE_ISSET_ID);
	}

	public void setRetrievemodeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETRIEVEMODE_ISSET_ID, value);
	}

	public boolean isIsmoved() {
		return this.ismoved;
	}

	public R66Result setIsmoved(boolean ismoved) {
		this.ismoved = ismoved;
		setIsmovedIsSet(true);
		return this;
	}

	public void unsetIsmoved() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISMOVED_ISSET_ID);
	}

	/** Returns true if field ismoved is set (has been assigned a value) and false otherwise */
	public boolean isSetIsmoved() {
		return EncodingUtils.testBit(__isset_bitfield, __ISMOVED_ISSET_ID);
	}

	public void setIsmovedIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISMOVED_ISSET_ID, value);
	}

	public String getOriginalfilename() {
		return this.originalfilename;
	}

	public R66Result setOriginalfilename(String originalfilename) {
		this.originalfilename = originalfilename;
		return this;
	}

	public void unsetOriginalfilename() {
		this.originalfilename = null;
	}

	/**
	 * Returns true if field originalfilename is set (has been assigned a value) and false otherwise
	 */
	public boolean isSetOriginalfilename() {
		return this.originalfilename != null;
	}

	public void setOriginalfilenameIsSet(boolean value) {
		if (!value) {
			this.originalfilename = null;
		}
	}

	public int getBlocksize() {
		return this.blocksize;
	}

	public R66Result setBlocksize(int blocksize) {
		this.blocksize = blocksize;
		setBlocksizeIsSet(true);
		return this;
	}

	public void unsetBlocksize() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID);
	}

	/** Returns true if field blocksize is set (has been assigned a value) and false otherwise */
	public boolean isSetBlocksize() {
		return EncodingUtils.testBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID);
	}

	public void setBlocksizeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID, value);
	}

	public int getModetransfer() {
		return this.modetransfer;
	}

	public R66Result setModetransfer(int modetransfer) {
		this.modetransfer = modetransfer;
		setModetransferIsSet(true);
		return this;
	}

	public void unsetModetransfer() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODETRANSFER_ISSET_ID);
	}

	/** Returns true if field modetransfer is set (has been assigned a value) and false otherwise */
	public boolean isSetModetransfer() {
		return EncodingUtils.testBit(__isset_bitfield, __MODETRANSFER_ISSET_ID);
	}

	public void setModetransferIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODETRANSFER_ISSET_ID, value);
	}

	public String getStart() {
		return this.start;
	}

	public R66Result setStart(String start) {
		this.start = start;
		return this;
	}

	public void unsetStart() {
		this.start = null;
	}

	/** Returns true if field start is set (has been assigned a value) and false otherwise */
	public boolean isSetStart() {
		return this.start != null;
	}

	public void setStartIsSet(boolean value) {
		if (!value) {
			this.start = null;
		}
	}

	public String getStop() {
		return this.stop;
	}

	public R66Result setStop(String stop) {
		this.stop = stop;
		return this;
	}

	public void unsetStop() {
		this.stop = null;
	}

	/** Returns true if field stop is set (has been assigned a value) and false otherwise */
	public boolean isSetStop() {
		return this.stop != null;
	}

	public void setStopIsSet(boolean value) {
		if (!value) {
			this.stop = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
			case MODE:
				if (value == null) {
					unsetMode();
				} else {
					setMode((RequestMode) value);
				}
				break;

			case FROMUID:
				if (value == null) {
					unsetFromuid();
				} else {
					setFromuid((String) value);
				}
				break;

			case DESTUID:
				if (value == null) {
					unsetDestuid();
				} else {
					setDestuid((String) value);
				}
				break;

			case FILE:
				if (value == null) {
					unsetFile();
				} else {
					setFile((String) value);
				}
				break;

			case RULE:
				if (value == null) {
					unsetRule();
				} else {
					setRule((String) value);
				}
				break;

			case TID:
				if (value == null) {
					unsetTid();
				} else {
					setTid((Long) value);
				}
				break;

			case ACTION:
				if (value == null) {
					unsetAction();
				} else {
					setAction((Action) value);
				}
				break;

			case CODE:
				if (value == null) {
					unsetCode();
				} else {
					setCode((ErrorCode) value);
				}
				break;

			case RESULTINFO:
				if (value == null) {
					unsetResultinfo();
				} else {
					setResultinfo((String) value);
				}
				break;

			case GLOBALSTEP:
				if (value == null) {
					unsetGlobalstep();
				} else {
					setGlobalstep((Integer) value);
				}
				break;

			case GLOBALLASTSTEP:
				if (value == null) {
					unsetGloballaststep();
				} else {
					setGloballaststep((Integer) value);
				}
				break;

			case STEP:
				if (value == null) {
					unsetStep();
				} else {
					setStep((Integer) value);
				}
				break;

			case RANK:
				if (value == null) {
					unsetRank();
				} else {
					setRank((Integer) value);
				}
				break;

			case RETRIEVEMODE:
				if (value == null) {
					unsetRetrievemode();
				} else {
					setRetrievemode((Boolean) value);
				}
				break;

			case ISMOVED:
				if (value == null) {
					unsetIsmoved();
				} else {
					setIsmoved((Boolean) value);
				}
				break;

			case ORIGINALFILENAME:
				if (value == null) {
					unsetOriginalfilename();
				} else {
					setOriginalfilename((String) value);
				}
				break;

			case BLOCKSIZE:
				if (value == null) {
					unsetBlocksize();
				} else {
					setBlocksize((Integer) value);
				}
				break;

			case MODETRANSFER:
				if (value == null) {
					unsetModetransfer();
				} else {
					setModetransfer((Integer) value);
				}
				break;

			case START:
				if (value == null) {
					unsetStart();
				} else {
					setStart((String) value);
				}
				break;

			case STOP:
				if (value == null) {
					unsetStop();
				} else {
					setStop((String) value);
				}
				break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
			case MODE:
				return getMode();

			case FROMUID:
				return getFromuid();

			case DESTUID:
				return getDestuid();

			case FILE:
				return getFile();

			case RULE:
				return getRule();

			case TID:
				return Long.valueOf(getTid());

			case ACTION:
				return getAction();

			case CODE:
				return getCode();

			case RESULTINFO:
				return getResultinfo();

			case GLOBALSTEP:
				return Integer.valueOf(getGlobalstep());

			case GLOBALLASTSTEP:
				return Integer.valueOf(getGloballaststep());

			case STEP:
				return Integer.valueOf(getStep());

			case RANK:
				return Integer.valueOf(getRank());

			case RETRIEVEMODE:
				return Boolean.valueOf(isRetrievemode());

			case ISMOVED:
				return Boolean.valueOf(isIsmoved());

			case ORIGINALFILENAME:
				return getOriginalfilename();

			case BLOCKSIZE:
				return Integer.valueOf(getBlocksize());

			case MODETRANSFER:
				return Integer.valueOf(getModetransfer());

			case START:
				return getStart();

			case STOP:
				return getStop();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
			case MODE:
				return isSetMode();
			case FROMUID:
				return isSetFromuid();
			case DESTUID:
				return isSetDestuid();
			case FILE:
				return isSetFile();
			case RULE:
				return isSetRule();
			case TID:
				return isSetTid();
			case ACTION:
				return isSetAction();
			case CODE:
				return isSetCode();
			case RESULTINFO:
				return isSetResultinfo();
			case GLOBALSTEP:
				return isSetGlobalstep();
			case GLOBALLASTSTEP:
				return isSetGloballaststep();
			case STEP:
				return isSetStep();
			case RANK:
				return isSetRank();
			case RETRIEVEMODE:
				return isSetRetrievemode();
			case ISMOVED:
				return isSetIsmoved();
			case ORIGINALFILENAME:
				return isSetOriginalfilename();
			case BLOCKSIZE:
				return isSetBlocksize();
			case MODETRANSFER:
				return isSetModetransfer();
			case START:
				return isSetStart();
			case STOP:
				return isSetStop();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof R66Result)
			return this.equals((R66Result) that);
		return false;
	}

	public boolean equals(R66Result that) {
		if (that == null)
			return false;

		boolean this_present_mode = true && this.isSetMode();
		boolean that_present_mode = true && that.isSetMode();
		if (this_present_mode || that_present_mode) {
			if (!(this_present_mode && that_present_mode))
				return false;
			if (!this.mode.equals(that.mode))
				return false;
		}

		boolean this_present_fromuid = true && this.isSetFromuid();
		boolean that_present_fromuid = true && that.isSetFromuid();
		if (this_present_fromuid || that_present_fromuid) {
			if (!(this_present_fromuid && that_present_fromuid))
				return false;
			if (!this.fromuid.equals(that.fromuid))
				return false;
		}

		boolean this_present_destuid = true && this.isSetDestuid();
		boolean that_present_destuid = true && that.isSetDestuid();
		if (this_present_destuid || that_present_destuid) {
			if (!(this_present_destuid && that_present_destuid))
				return false;
			if (!this.destuid.equals(that.destuid))
				return false;
		}

		boolean this_present_file = true && this.isSetFile();
		boolean that_present_file = true && that.isSetFile();
		if (this_present_file || that_present_file) {
			if (!(this_present_file && that_present_file))
				return false;
			if (!this.file.equals(that.file))
				return false;
		}

		boolean this_present_rule = true && this.isSetRule();
		boolean that_present_rule = true && that.isSetRule();
		if (this_present_rule || that_present_rule) {
			if (!(this_present_rule && that_present_rule))
				return false;
			if (!this.rule.equals(that.rule))
				return false;
		}

		boolean this_present_tid = true && this.isSetTid();
		boolean that_present_tid = true && that.isSetTid();
		if (this_present_tid || that_present_tid) {
			if (!(this_present_tid && that_present_tid))
				return false;
			if (this.tid != that.tid)
				return false;
		}

		boolean this_present_action = true && this.isSetAction();
		boolean that_present_action = true && that.isSetAction();
		if (this_present_action || that_present_action) {
			if (!(this_present_action && that_present_action))
				return false;
			if (!this.action.equals(that.action))
				return false;
		}

		boolean this_present_code = true && this.isSetCode();
		boolean that_present_code = true && that.isSetCode();
		if (this_present_code || that_present_code) {
			if (!(this_present_code && that_present_code))
				return false;
			if (!this.code.equals(that.code))
				return false;
		}

		boolean this_present_resultinfo = true && this.isSetResultinfo();
		boolean that_present_resultinfo = true && that.isSetResultinfo();
		if (this_present_resultinfo || that_present_resultinfo) {
			if (!(this_present_resultinfo && that_present_resultinfo))
				return false;
			if (!this.resultinfo.equals(that.resultinfo))
				return false;
		}

		boolean this_present_globalstep = true && this.isSetGlobalstep();
		boolean that_present_globalstep = true && that.isSetGlobalstep();
		if (this_present_globalstep || that_present_globalstep) {
			if (!(this_present_globalstep && that_present_globalstep))
				return false;
			if (this.globalstep != that.globalstep)
				return false;
		}

		boolean this_present_globallaststep = true && this.isSetGloballaststep();
		boolean that_present_globallaststep = true && that.isSetGloballaststep();
		if (this_present_globallaststep || that_present_globallaststep) {
			if (!(this_present_globallaststep && that_present_globallaststep))
				return false;
			if (this.globallaststep != that.globallaststep)
				return false;
		}

		boolean this_present_step = true && this.isSetStep();
		boolean that_present_step = true && that.isSetStep();
		if (this_present_step || that_present_step) {
			if (!(this_present_step && that_present_step))
				return false;
			if (this.step != that.step)
				return false;
		}

		boolean this_present_rank = true && this.isSetRank();
		boolean that_present_rank = true && that.isSetRank();
		if (this_present_rank || that_present_rank) {
			if (!(this_present_rank && that_present_rank))
				return false;
			if (this.rank != that.rank)
				return false;
		}

		boolean this_present_retrievemode = true && this.isSetRetrievemode();
		boolean that_present_retrievemode = true && that.isSetRetrievemode();
		if (this_present_retrievemode || that_present_retrievemode) {
			if (!(this_present_retrievemode && that_present_retrievemode))
				return false;
			if (this.retrievemode != that.retrievemode)
				return false;
		}

		boolean this_present_ismoved = true && this.isSetIsmoved();
		boolean that_present_ismoved = true && that.isSetIsmoved();
		if (this_present_ismoved || that_present_ismoved) {
			if (!(this_present_ismoved && that_present_ismoved))
				return false;
			if (this.ismoved != that.ismoved)
				return false;
		}

		boolean this_present_originalfilename = true && this.isSetOriginalfilename();
		boolean that_present_originalfilename = true && that.isSetOriginalfilename();
		if (this_present_originalfilename || that_present_originalfilename) {
			if (!(this_present_originalfilename && that_present_originalfilename))
				return false;
			if (!this.originalfilename.equals(that.originalfilename))
				return false;
		}

		boolean this_present_blocksize = true && this.isSetBlocksize();
		boolean that_present_blocksize = true && that.isSetBlocksize();
		if (this_present_blocksize || that_present_blocksize) {
			if (!(this_present_blocksize && that_present_blocksize))
				return false;
			if (this.blocksize != that.blocksize)
				return false;
		}

		boolean this_present_modetransfer = true && this.isSetModetransfer();
		boolean that_present_modetransfer = true && that.isSetModetransfer();
		if (this_present_modetransfer || that_present_modetransfer) {
			if (!(this_present_modetransfer && that_present_modetransfer))
				return false;
			if (this.modetransfer != that.modetransfer)
				return false;
		}

		boolean this_present_start = true && this.isSetStart();
		boolean that_present_start = true && that.isSetStart();
		if (this_present_start || that_present_start) {
			if (!(this_present_start && that_present_start))
				return false;
			if (!this.start.equals(that.start))
				return false;
		}

		boolean this_present_stop = true && this.isSetStop();
		boolean that_present_stop = true && that.isSetStop();
		if (this_present_stop || that_present_stop) {
			if (!(this_present_stop && that_present_stop))
				return false;
			if (!this.stop.equals(that.stop))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		return 0;
	}

	public int compareTo(R66Result other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;
		R66Result typedOther = (R66Result) other;

		lastComparison = Boolean.valueOf(isSetMode()).compareTo(typedOther.isSetMode());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMode()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, typedOther.mode);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetFromuid()).compareTo(typedOther.isSetFromuid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFromuid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromuid,
					typedOther.fromuid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDestuid()).compareTo(typedOther.isSetDestuid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDestuid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destuid,
					typedOther.destuid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetFile()).compareTo(typedOther.isSetFile());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFile()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file, typedOther.file);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetRule()).compareTo(typedOther.isSetRule());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRule()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, typedOther.rule);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTid()).compareTo(typedOther.isSetTid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, typedOther.tid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetAction()).compareTo(typedOther.isSetAction());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAction()) {
			lastComparison = org.apache.thrift.TBaseHelper
					.compareTo(this.action, typedOther.action);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetCode()).compareTo(typedOther.isSetCode());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetCode()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, typedOther.code);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetResultinfo()).compareTo(typedOther.isSetResultinfo());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetResultinfo()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultinfo,
					typedOther.resultinfo);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetGlobalstep()).compareTo(typedOther.isSetGlobalstep());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetGlobalstep()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.globalstep,
					typedOther.globalstep);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetGloballaststep()).compareTo(
				typedOther.isSetGloballaststep());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetGloballaststep()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.globallaststep,
					typedOther.globallaststep);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetStep()).compareTo(typedOther.isSetStep());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStep()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.step, typedOther.step);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetRank()).compareTo(typedOther.isSetRank());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRank()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rank, typedOther.rank);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetRetrievemode()).compareTo(
				typedOther.isSetRetrievemode());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRetrievemode()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retrievemode,
					typedOther.retrievemode);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetIsmoved()).compareTo(typedOther.isSetIsmoved());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIsmoved()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ismoved,
					typedOther.ismoved);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetOriginalfilename()).compareTo(
				typedOther.isSetOriginalfilename());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetOriginalfilename()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalfilename,
					typedOther.originalfilename);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetBlocksize()).compareTo(typedOther.isSetBlocksize());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBlocksize()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blocksize,
					typedOther.blocksize);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetModetransfer()).compareTo(
				typedOther.isSetModetransfer());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetModetransfer()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modetransfer,
					typedOther.modetransfer);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStart()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetStop()).compareTo(typedOther.isSetStop());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStop()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stop, typedOther.stop);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot)
			throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot)
			throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("R66Result(");
		boolean first = true;

		sb.append("mode:");
		if (this.mode == null) {
			sb.append("null");
		} else {
			sb.append(this.mode);
		}
		first = false;
		if (isSetFromuid()) {
			if (!first)
				sb.append(", ");
			sb.append("fromuid:");
			if (this.fromuid == null) {
				sb.append("null");
			} else {
				sb.append(this.fromuid);
			}
			first = false;
		}
		if (isSetDestuid()) {
			if (!first)
				sb.append(", ");
			sb.append("destuid:");
			if (this.destuid == null) {
				sb.append("null");
			} else {
				sb.append(this.destuid);
			}
			first = false;
		}
		if (isSetFile()) {
			if (!first)
				sb.append(", ");
			sb.append("file:");
			if (this.file == null) {
				sb.append("null");
			} else {
				sb.append(this.file);
			}
			first = false;
		}
		if (isSetRule()) {
			if (!first)
				sb.append(", ");
			sb.append("rule:");
			if (this.rule == null) {
				sb.append("null");
			} else {
				sb.append(this.rule);
			}
			first = false;
		}
		if (isSetTid()) {
			if (!first)
				sb.append(", ");
			sb.append("tid:");
			sb.append(this.tid);
			first = false;
		}
		if (isSetAction()) {
			if (!first)
				sb.append(", ");
			sb.append("action:");
			if (this.action == null) {
				sb.append("null");
			} else {
				sb.append(this.action);
			}
			first = false;
		}
		if (!first)
			sb.append(", ");
		sb.append("code:");
		if (this.code == null) {
			sb.append("null");
		} else {
			sb.append(this.code);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("resultinfo:");
		if (this.resultinfo == null) {
			sb.append("null");
		} else {
			sb.append(this.resultinfo);
		}
		first = false;
		if (isSetGlobalstep()) {
			if (!first)
				sb.append(", ");
			sb.append("globalstep:");
			sb.append(this.globalstep);
			first = false;
		}
		if (isSetGloballaststep()) {
			if (!first)
				sb.append(", ");
			sb.append("globallaststep:");
			sb.append(this.globallaststep);
			first = false;
		}
		if (isSetStep()) {
			if (!first)
				sb.append(", ");
			sb.append("step:");
			sb.append(this.step);
			first = false;
		}
		if (isSetRank()) {
			if (!first)
				sb.append(", ");
			sb.append("rank:");
			sb.append(this.rank);
			first = false;
		}
		if (isSetRetrievemode()) {
			if (!first)
				sb.append(", ");
			sb.append("retrievemode:");
			sb.append(this.retrievemode);
			first = false;
		}
		if (isSetIsmoved()) {
			if (!first)
				sb.append(", ");
			sb.append("ismoved:");
			sb.append(this.ismoved);
			first = false;
		}
		if (isSetOriginalfilename()) {
			if (!first)
				sb.append(", ");
			sb.append("originalfilename:");
			if (this.originalfilename == null) {
				sb.append("null");
			} else {
				sb.append(this.originalfilename);
			}
			first = false;
		}
		if (isSetBlocksize()) {
			if (!first)
				sb.append(", ");
			sb.append("blocksize:");
			sb.append(this.blocksize);
			first = false;
		}
		if (isSetModetransfer()) {
			if (!first)
				sb.append(", ");
			sb.append("modetransfer:");
			sb.append(this.modetransfer);
			first = false;
		}
		if (isSetStart()) {
			if (!first)
				sb.append(", ");
			sb.append("start:");
			if (this.start == null) {
				sb.append("null");
			} else {
				sb.append(this.start);
			}
			first = false;
		}
		if (isSetStop()) {
			if (!first)
				sb.append(", ");
			sb.append("stop:");
			if (this.stop == null) {
				sb.append("null");
			} else {
				sb.append(this.stop);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		if (mode == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'mode' was not present! Struct: " + toString());
		}
		if (code == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'code' was not present! Struct: " + toString());
		}
		if (resultinfo == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'resultinfo' was not present! Struct: " + toString());
		}
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
			ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and
			// doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class R66ResultStandardSchemeFactory implements SchemeFactory {
		public R66ResultStandardScheme getScheme() {
			return new R66ResultStandardScheme();
		}
	}

	private static class R66ResultStandardScheme extends StandardScheme<R66Result> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, R66Result struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true)
			{
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
					case 1: // MODE
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.mode = RequestMode.findByValue(iprot.readI32());
							struct.setModeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // FROMUID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.fromuid = iprot.readString();
							struct.setFromuidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // DESTUID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.destuid = iprot.readString();
							struct.setDestuidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 4: // FILE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.file = iprot.readString();
							struct.setFileIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 5: // RULE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.rule = iprot.readString();
							struct.setRuleIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 20: // TID
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.tid = iprot.readI64();
							struct.setTidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 21: // ACTION
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.action = Action.findByValue(iprot.readI32());
							struct.setActionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 30: // CODE
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.code = ErrorCode.findByValue(iprot.readI32());
							struct.setCodeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 31: // RESULTINFO
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.resultinfo = iprot.readString();
							struct.setResultinfoIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 32: // GLOBALSTEP
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.globalstep = iprot.readI32();
							struct.setGlobalstepIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 33: // GLOBALLASTSTEP
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.globallaststep = iprot.readI32();
							struct.setGloballaststepIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 34: // STEP
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.step = iprot.readI32();
							struct.setStepIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 35: // RANK
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.rank = iprot.readI32();
							struct.setRankIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 36: // RETRIEVEMODE
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.retrievemode = iprot.readBool();
							struct.setRetrievemodeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 37: // ISMOVED
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.ismoved = iprot.readBool();
							struct.setIsmovedIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 38: // ORIGINALFILENAME
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.originalfilename = iprot.readString();
							struct.setOriginalfilenameIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 39: // BLOCKSIZE
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.blocksize = iprot.readI32();
							struct.setBlocksizeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 40: // MODETRANSFER
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.modetransfer = iprot.readI32();
							struct.setModetransferIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 41: // START
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.start = iprot.readString();
							struct.setStartIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 42: // STOP
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.stop = iprot.readString();
							struct.setStopIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the validate
			// method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, R66Result struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.mode != null) {
				oprot.writeFieldBegin(MODE_FIELD_DESC);
				oprot.writeI32(struct.mode.getValue());
				oprot.writeFieldEnd();
			}
			if (struct.fromuid != null) {
				if (struct.isSetFromuid()) {
					oprot.writeFieldBegin(FROMUID_FIELD_DESC);
					oprot.writeString(struct.fromuid);
					oprot.writeFieldEnd();
				}
			}
			if (struct.destuid != null) {
				if (struct.isSetDestuid()) {
					oprot.writeFieldBegin(DESTUID_FIELD_DESC);
					oprot.writeString(struct.destuid);
					oprot.writeFieldEnd();
				}
			}
			if (struct.file != null) {
				if (struct.isSetFile()) {
					oprot.writeFieldBegin(FILE_FIELD_DESC);
					oprot.writeString(struct.file);
					oprot.writeFieldEnd();
				}
			}
			if (struct.rule != null) {
				if (struct.isSetRule()) {
					oprot.writeFieldBegin(RULE_FIELD_DESC);
					oprot.writeString(struct.rule);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetTid()) {
				oprot.writeFieldBegin(TID_FIELD_DESC);
				oprot.writeI64(struct.tid);
				oprot.writeFieldEnd();
			}
			if (struct.action != null) {
				if (struct.isSetAction()) {
					oprot.writeFieldBegin(ACTION_FIELD_DESC);
					oprot.writeI32(struct.action.getValue());
					oprot.writeFieldEnd();
				}
			}
			if (struct.code != null) {
				oprot.writeFieldBegin(CODE_FIELD_DESC);
				oprot.writeI32(struct.code.getValue());
				oprot.writeFieldEnd();
			}
			if (struct.resultinfo != null) {
				oprot.writeFieldBegin(RESULTINFO_FIELD_DESC);
				oprot.writeString(struct.resultinfo);
				oprot.writeFieldEnd();
			}
			if (struct.isSetGlobalstep()) {
				oprot.writeFieldBegin(GLOBALSTEP_FIELD_DESC);
				oprot.writeI32(struct.globalstep);
				oprot.writeFieldEnd();
			}
			if (struct.isSetGloballaststep()) {
				oprot.writeFieldBegin(GLOBALLASTSTEP_FIELD_DESC);
				oprot.writeI32(struct.globallaststep);
				oprot.writeFieldEnd();
			}
			if (struct.isSetStep()) {
				oprot.writeFieldBegin(STEP_FIELD_DESC);
				oprot.writeI32(struct.step);
				oprot.writeFieldEnd();
			}
			if (struct.isSetRank()) {
				oprot.writeFieldBegin(RANK_FIELD_DESC);
				oprot.writeI32(struct.rank);
				oprot.writeFieldEnd();
			}
			if (struct.isSetRetrievemode()) {
				oprot.writeFieldBegin(RETRIEVEMODE_FIELD_DESC);
				oprot.writeBool(struct.retrievemode);
				oprot.writeFieldEnd();
			}
			if (struct.isSetIsmoved()) {
				oprot.writeFieldBegin(ISMOVED_FIELD_DESC);
				oprot.writeBool(struct.ismoved);
				oprot.writeFieldEnd();
			}
			if (struct.originalfilename != null) {
				if (struct.isSetOriginalfilename()) {
					oprot.writeFieldBegin(ORIGINALFILENAME_FIELD_DESC);
					oprot.writeString(struct.originalfilename);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetBlocksize()) {
				oprot.writeFieldBegin(BLOCKSIZE_FIELD_DESC);
				oprot.writeI32(struct.blocksize);
				oprot.writeFieldEnd();
			}
			if (struct.isSetModetransfer()) {
				oprot.writeFieldBegin(MODETRANSFER_FIELD_DESC);
				oprot.writeI32(struct.modetransfer);
				oprot.writeFieldEnd();
			}
			if (struct.start != null) {
				if (struct.isSetStart()) {
					oprot.writeFieldBegin(START_FIELD_DESC);
					oprot.writeString(struct.start);
					oprot.writeFieldEnd();
				}
			}
			if (struct.stop != null) {
				if (struct.isSetStop()) {
					oprot.writeFieldBegin(STOP_FIELD_DESC);
					oprot.writeString(struct.stop);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class R66ResultTupleSchemeFactory implements SchemeFactory {
		public R66ResultTupleScheme getScheme() {
			return new R66ResultTupleScheme();
		}
	}

	private static class R66ResultTupleScheme extends TupleScheme<R66Result> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, R66Result struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			oprot.writeI32(struct.mode.getValue());
			oprot.writeI32(struct.code.getValue());
			oprot.writeString(struct.resultinfo);
			BitSet optionals = new BitSet();
			if (struct.isSetFromuid()) {
				optionals.set(0);
			}
			if (struct.isSetDestuid()) {
				optionals.set(1);
			}
			if (struct.isSetFile()) {
				optionals.set(2);
			}
			if (struct.isSetRule()) {
				optionals.set(3);
			}
			if (struct.isSetTid()) {
				optionals.set(4);
			}
			if (struct.isSetAction()) {
				optionals.set(5);
			}
			if (struct.isSetGlobalstep()) {
				optionals.set(6);
			}
			if (struct.isSetGloballaststep()) {
				optionals.set(7);
			}
			if (struct.isSetStep()) {
				optionals.set(8);
			}
			if (struct.isSetRank()) {
				optionals.set(9);
			}
			if (struct.isSetRetrievemode()) {
				optionals.set(10);
			}
			if (struct.isSetIsmoved()) {
				optionals.set(11);
			}
			if (struct.isSetOriginalfilename()) {
				optionals.set(12);
			}
			if (struct.isSetBlocksize()) {
				optionals.set(13);
			}
			if (struct.isSetModetransfer()) {
				optionals.set(14);
			}
			if (struct.isSetStart()) {
				optionals.set(15);
			}
			if (struct.isSetStop()) {
				optionals.set(16);
			}
			oprot.writeBitSet(optionals, 17);
			if (struct.isSetFromuid()) {
				oprot.writeString(struct.fromuid);
			}
			if (struct.isSetDestuid()) {
				oprot.writeString(struct.destuid);
			}
			if (struct.isSetFile()) {
				oprot.writeString(struct.file);
			}
			if (struct.isSetRule()) {
				oprot.writeString(struct.rule);
			}
			if (struct.isSetTid()) {
				oprot.writeI64(struct.tid);
			}
			if (struct.isSetAction()) {
				oprot.writeI32(struct.action.getValue());
			}
			if (struct.isSetGlobalstep()) {
				oprot.writeI32(struct.globalstep);
			}
			if (struct.isSetGloballaststep()) {
				oprot.writeI32(struct.globallaststep);
			}
			if (struct.isSetStep()) {
				oprot.writeI32(struct.step);
			}
			if (struct.isSetRank()) {
				oprot.writeI32(struct.rank);
			}
			if (struct.isSetRetrievemode()) {
				oprot.writeBool(struct.retrievemode);
			}
			if (struct.isSetIsmoved()) {
				oprot.writeBool(struct.ismoved);
			}
			if (struct.isSetOriginalfilename()) {
				oprot.writeString(struct.originalfilename);
			}
			if (struct.isSetBlocksize()) {
				oprot.writeI32(struct.blocksize);
			}
			if (struct.isSetModetransfer()) {
				oprot.writeI32(struct.modetransfer);
			}
			if (struct.isSetStart()) {
				oprot.writeString(struct.start);
			}
			if (struct.isSetStop()) {
				oprot.writeString(struct.stop);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, R66Result struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			struct.mode = RequestMode.findByValue(iprot.readI32());
			struct.setModeIsSet(true);
			struct.code = ErrorCode.findByValue(iprot.readI32());
			struct.setCodeIsSet(true);
			struct.resultinfo = iprot.readString();
			struct.setResultinfoIsSet(true);
			BitSet incoming = iprot.readBitSet(17);
			if (incoming.get(0)) {
				struct.fromuid = iprot.readString();
				struct.setFromuidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.destuid = iprot.readString();
				struct.setDestuidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.file = iprot.readString();
				struct.setFileIsSet(true);
			}
			if (incoming.get(3)) {
				struct.rule = iprot.readString();
				struct.setRuleIsSet(true);
			}
			if (incoming.get(4)) {
				struct.tid = iprot.readI64();
				struct.setTidIsSet(true);
			}
			if (incoming.get(5)) {
				struct.action = Action.findByValue(iprot.readI32());
				struct.setActionIsSet(true);
			}
			if (incoming.get(6)) {
				struct.globalstep = iprot.readI32();
				struct.setGlobalstepIsSet(true);
			}
			if (incoming.get(7)) {
				struct.globallaststep = iprot.readI32();
				struct.setGloballaststepIsSet(true);
			}
			if (incoming.get(8)) {
				struct.step = iprot.readI32();
				struct.setStepIsSet(true);
			}
			if (incoming.get(9)) {
				struct.rank = iprot.readI32();
				struct.setRankIsSet(true);
			}
			if (incoming.get(10)) {
				struct.retrievemode = iprot.readBool();
				struct.setRetrievemodeIsSet(true);
			}
			if (incoming.get(11)) {
				struct.ismoved = iprot.readBool();
				struct.setIsmovedIsSet(true);
			}
			if (incoming.get(12)) {
				struct.originalfilename = iprot.readString();
				struct.setOriginalfilenameIsSet(true);
			}
			if (incoming.get(13)) {
				struct.blocksize = iprot.readI32();
				struct.setBlocksizeIsSet(true);
			}
			if (incoming.get(14)) {
				struct.modetransfer = iprot.readI32();
				struct.setModetransferIsSet(true);
			}
			if (incoming.get(15)) {
				struct.start = iprot.readString();
				struct.setStartIsSet(true);
			}
			if (incoming.get(16)) {
				struct.stop = iprot.readString();
				struct.setStopIsSet(true);
			}
		}
	}

}
