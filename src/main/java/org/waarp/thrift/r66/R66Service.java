/**
 * Autogenerated by Thrift Compiler (0.9.0)
 * 
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * 
 * @generated
 */
package org.waarp.thrift.r66;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class R66Service {

	public interface Iface {

		public R66Result transferRequestQuery(R66Request request)
				throws org.apache.thrift.TException;

		public R66Result infoTransferQuery(R66Request request) throws org.apache.thrift.TException;

		public boolean isStillRunning(String fromuid, String touid, long tid)
				throws org.apache.thrift.TException;

		public List<String> infoListQuery(R66Request request) throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void transferRequestQuery(
				R66Request request,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.transferRequestQuery_call> resultHandler)
				throws org.apache.thrift.TException;

		public void infoTransferQuery(
				R66Request request,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.infoTransferQuery_call> resultHandler)
				throws org.apache.thrift.TException;

		public void isStillRunning(
				String fromuid,
				String touid,
				long tid,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.isStillRunning_call> resultHandler)
				throws org.apache.thrift.TException;

		public void infoListQuery(
				R66Request request,
				org.apache.thrift.async.AsyncMethodCallback<AsyncClient.infoListQuery_call> resultHandler)
				throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient implements Iface {
		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot)
		{
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot,
				org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public R66Result transferRequestQuery(R66Request request)
				throws org.apache.thrift.TException
		{
			send_transferRequestQuery(request);
			return recv_transferRequestQuery();
		}

		public void send_transferRequestQuery(R66Request request)
				throws org.apache.thrift.TException
		{
			transferRequestQuery_args args = new transferRequestQuery_args();
			args.setRequest(request);
			sendBase("transferRequestQuery", args);
		}

		public R66Result recv_transferRequestQuery() throws org.apache.thrift.TException
		{
			transferRequestQuery_result result = new transferRequestQuery_result();
			receiveBase(result, "transferRequestQuery");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"transferRequestQuery failed: unknown result");
		}

		public R66Result infoTransferQuery(R66Request request) throws org.apache.thrift.TException
		{
			send_infoTransferQuery(request);
			return recv_infoTransferQuery();
		}

		public void send_infoTransferQuery(R66Request request) throws org.apache.thrift.TException
		{
			infoTransferQuery_args args = new infoTransferQuery_args();
			args.setRequest(request);
			sendBase("infoTransferQuery", args);
		}

		public R66Result recv_infoTransferQuery() throws org.apache.thrift.TException
		{
			infoTransferQuery_result result = new infoTransferQuery_result();
			receiveBase(result, "infoTransferQuery");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"infoTransferQuery failed: unknown result");
		}

		public boolean isStillRunning(String fromuid, String touid, long tid)
				throws org.apache.thrift.TException
		{
			send_isStillRunning(fromuid, touid, tid);
			return recv_isStillRunning();
		}

		public void send_isStillRunning(String fromuid, String touid, long tid)
				throws org.apache.thrift.TException
		{
			isStillRunning_args args = new isStillRunning_args();
			args.setFromuid(fromuid);
			args.setTouid(touid);
			args.setTid(tid);
			sendBase("isStillRunning", args);
		}

		public boolean recv_isStillRunning() throws org.apache.thrift.TException
		{
			isStillRunning_result result = new isStillRunning_result();
			receiveBase(result, "isStillRunning");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"isStillRunning failed: unknown result");
		}

		public List<String> infoListQuery(R66Request request) throws org.apache.thrift.TException
		{
			send_infoListQuery(request);
			return recv_infoListQuery();
		}

		public void send_infoListQuery(R66Request request) throws org.apache.thrift.TException
		{
			infoListQuery_args args = new infoListQuery_args();
			args.setRequest(request);
			sendBase("infoListQuery", args);
		}

		public List<String> recv_infoListQuery() throws org.apache.thrift.TException
		{
			infoListQuery_result result = new infoListQuery_result();
			receiveBase(result, "infoListQuery");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(
					org.apache.thrift.TApplicationException.MISSING_RESULT,
					"infoListQuery failed: unknown result");
		}

	}

	public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements
			AsyncIface {
		public static class Factory implements
				org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(
					org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}
		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void transferRequestQuery(R66Request request,
				org.apache.thrift.async.AsyncMethodCallback<transferRequestQuery_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			transferRequestQuery_call method_call = new transferRequestQuery_call(request,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class transferRequestQuery_call extends
				org.apache.thrift.async.TAsyncMethodCall {
			private R66Request request;

			public transferRequestQuery_call(
					R66Request request,
					org.apache.thrift.async.AsyncMethodCallback<transferRequestQuery_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.request = request;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
						"transferRequestQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
				transferRequestQuery_args args = new transferRequestQuery_args();
				args.setRequest(request);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public R66Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
						.getProtocol(memoryTransport);
				return (new Client(prot)).recv_transferRequestQuery();
			}
		}

		public void infoTransferQuery(R66Request request,
				org.apache.thrift.async.AsyncMethodCallback<infoTransferQuery_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			infoTransferQuery_call method_call = new infoTransferQuery_call(request, resultHandler,
					this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class infoTransferQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
			private R66Request request;

			public infoTransferQuery_call(
					R66Request request,
					org.apache.thrift.async.AsyncMethodCallback<infoTransferQuery_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.request = request;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("infoTransferQuery",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				infoTransferQuery_args args = new infoTransferQuery_args();
				args.setRequest(request);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public R66Result getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
						.getProtocol(memoryTransport);
				return (new Client(prot)).recv_infoTransferQuery();
			}
		}

		public void isStillRunning(String fromuid, String touid, long tid,
				org.apache.thrift.async.AsyncMethodCallback<isStillRunning_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			isStillRunning_call method_call = new isStillRunning_call(fromuid, touid, tid,
					resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class isStillRunning_call extends org.apache.thrift.async.TAsyncMethodCall {
			private String fromuid;
			private String touid;
			private long tid;

			public isStillRunning_call(String fromuid, String touid, long tid,
					org.apache.thrift.async.AsyncMethodCallback<isStillRunning_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.fromuid = fromuid;
				this.touid = touid;
				this.tid = tid;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isStillRunning",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				isStillRunning_args args = new isStillRunning_args();
				args.setFromuid(fromuid);
				args.setTouid(touid);
				args.setTid(tid);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public boolean getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
						.getProtocol(memoryTransport);
				return (new Client(prot)).recv_isStillRunning();
			}
		}

		public void infoListQuery(R66Request request,
				org.apache.thrift.async.AsyncMethodCallback<infoListQuery_call> resultHandler)
				throws org.apache.thrift.TException {
			checkReady();
			infoListQuery_call method_call = new infoListQuery_call(request, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class infoListQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
			private R66Request request;

			public infoListQuery_call(R66Request request,
					org.apache.thrift.async.AsyncMethodCallback<infoListQuery_call> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport)
					throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.request = request;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot)
					throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("infoListQuery",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				infoListQuery_args args = new infoListQuery_args();
				args.setRequest(request);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public List<String> getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory()
						.getProtocol(memoryTransport);
				return (new Client(prot)).recv_infoListQuery();
			}
		}

	}

	public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
			implements org.apache.thrift.TProcessor {
		private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(
					iface,
					getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(
				I iface,
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("transferRequestQuery", new transferRequestQuery());
			processMap.put("infoTransferQuery", new infoTransferQuery());
			processMap.put("isStillRunning", new isStillRunning());
			processMap.put("infoListQuery", new infoListQuery());
			return processMap;
		}

		public static class transferRequestQuery<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, transferRequestQuery_args> {
			public transferRequestQuery() {
				super("transferRequestQuery");
			}

			public transferRequestQuery_args getEmptyArgsInstance() {
				return new transferRequestQuery_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public transferRequestQuery_result getResult(I iface, transferRequestQuery_args args)
					throws org.apache.thrift.TException {
				transferRequestQuery_result result = new transferRequestQuery_result();
				result.success = iface.transferRequestQuery(args.request);
				return result;
			}
		}

		public static class infoTransferQuery<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, infoTransferQuery_args> {
			public infoTransferQuery() {
				super("infoTransferQuery");
			}

			public infoTransferQuery_args getEmptyArgsInstance() {
				return new infoTransferQuery_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public infoTransferQuery_result getResult(I iface, infoTransferQuery_args args)
					throws org.apache.thrift.TException {
				infoTransferQuery_result result = new infoTransferQuery_result();
				result.success = iface.infoTransferQuery(args.request);
				return result;
			}
		}

		public static class isStillRunning<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, isStillRunning_args> {
			public isStillRunning() {
				super("isStillRunning");
			}

			public isStillRunning_args getEmptyArgsInstance() {
				return new isStillRunning_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public isStillRunning_result getResult(I iface, isStillRunning_args args)
					throws org.apache.thrift.TException {
				isStillRunning_result result = new isStillRunning_result();
				result.success = iface.isStillRunning(args.fromuid, args.touid, args.tid);
				result.setSuccessIsSet(true);
				return result;
			}
		}

		public static class infoListQuery<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, infoListQuery_args> {
			public infoListQuery() {
				super("infoListQuery");
			}

			public infoListQuery_args getEmptyArgsInstance() {
				return new infoListQuery_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public infoListQuery_result getResult(I iface, infoListQuery_args args)
					throws org.apache.thrift.TException {
				infoListQuery_result result = new infoListQuery_result();
				result.success = iface.infoListQuery(args.request);
				return result;
			}
		}

	}

	public static class transferRequestQuery_args implements
			org.apache.thrift.TBase<transferRequestQuery_args, transferRequestQuery_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"transferRequestQuery_args");

		private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"request", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new transferRequestQuery_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new transferRequestQuery_argsTupleSchemeFactory());
		}

		private R66Request request; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for finding and
		 * manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			REQUEST((short) 1, "request");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
					case 1: // REQUEST
						return REQUEST;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it is not
			 * found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.StructMetaData(
							org.apache.thrift.protocol.TType.STRUCT, R66Request.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					transferRequestQuery_args.class, metaDataMap);
		}

		public transferRequestQuery_args() {
		}

		public transferRequestQuery_args(
				R66Request request)
		{
			this();
			this.request = request;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public transferRequestQuery_args(transferRequestQuery_args other) {
			if (other.isSetRequest()) {
				this.request = new R66Request(other.request);
			}
		}

		public transferRequestQuery_args deepCopy() {
			return new transferRequestQuery_args(this);
		}

		@Override
		public void clear() {
			this.request = null;
		}

		public R66Request getRequest() {
			return this.request;
		}

		public transferRequestQuery_args setRequest(R66Request request) {
			this.request = request;
			return this;
		}

		public void unsetRequest() {
			this.request = null;
		}

		/** Returns true if field request is set (has been assigned a value) and false otherwise */
		public boolean isSetRequest() {
			return this.request != null;
		}

		public void setRequestIsSet(boolean value) {
			if (!value) {
				this.request = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
				case REQUEST:
					if (value == null) {
						unsetRequest();
					} else {
						setRequest((R66Request) value);
					}
					break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
				case REQUEST:
					return getRequest();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
				case REQUEST:
					return isSetRequest();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof transferRequestQuery_args)
				return this.equals((transferRequestQuery_args) that);
			return false;
		}

		public boolean equals(transferRequestQuery_args that) {
			if (that == null)
				return false;

			boolean this_present_request = true && this.isSetRequest();
			boolean that_present_request = true && that.isSetRequest();
			if (this_present_request || that_present_request) {
				if (!(this_present_request && that_present_request))
					return false;
				if (!this.request.equals(that.request))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		public int compareTo(transferRequestQuery_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;
			transferRequestQuery_args typedOther = (transferRequestQuery_args) other;

			lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRequest()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request,
						typedOther.request);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("transferRequestQuery_args(");
			boolean first = true;

			sb.append("request:");
			if (this.request == null) {
				sb.append("null");
			} else {
				sb.append(this.request);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (request != null) {
				request.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
				ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class transferRequestQuery_argsStandardSchemeFactory implements
				SchemeFactory {
			public transferRequestQuery_argsStandardScheme getScheme() {
				return new transferRequestQuery_argsStandardScheme();
			}
		}

		private static class transferRequestQuery_argsStandardScheme extends
				StandardScheme<transferRequestQuery_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					transferRequestQuery_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 1: // REQUEST
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.request = new R66Request();
								struct.request.read(iprot);
								struct.setRequestIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
										schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					transferRequestQuery_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.request != null) {
					oprot.writeFieldBegin(REQUEST_FIELD_DESC);
					struct.request.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class transferRequestQuery_argsTupleSchemeFactory implements SchemeFactory {
			public transferRequestQuery_argsTupleScheme getScheme() {
				return new transferRequestQuery_argsTupleScheme();
			}
		}

		private static class transferRequestQuery_argsTupleScheme extends
				TupleScheme<transferRequestQuery_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					transferRequestQuery_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetRequest()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetRequest()) {
					struct.request.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					transferRequestQuery_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.request = new R66Request();
					struct.request.read(iprot);
					struct.setRequestIsSet(true);
				}
			}
		}

	}

	public static class transferRequestQuery_result
			implements
			org.apache.thrift.TBase<transferRequestQuery_result, transferRequestQuery_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"transferRequestQuery_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class,
					new transferRequestQuery_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new transferRequestQuery_resultTupleSchemeFactory());
		}

		private R66Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for finding and
		 * manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
					case 0: // SUCCESS
						return SUCCESS;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it is not
			 * found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.StructMetaData(
							org.apache.thrift.protocol.TType.STRUCT, R66Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					transferRequestQuery_result.class, metaDataMap);
		}

		public transferRequestQuery_result() {
		}

		public transferRequestQuery_result(
				R66Result success)
		{
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public transferRequestQuery_result(transferRequestQuery_result other) {
			if (other.isSetSuccess()) {
				this.success = new R66Result(other.success);
			}
		}

		public transferRequestQuery_result deepCopy() {
			return new transferRequestQuery_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public R66Result getSuccess() {
			return this.success;
		}

		public transferRequestQuery_result setSuccess(R66Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
				case SUCCESS:
					if (value == null) {
						unsetSuccess();
					} else {
						setSuccess((R66Result) value);
					}
					break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
				case SUCCESS:
					return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
				case SUCCESS:
					return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof transferRequestQuery_result)
				return this.equals((transferRequestQuery_result) that);
			return false;
		}

		public boolean equals(transferRequestQuery_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		public int compareTo(transferRequestQuery_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;
			transferRequestQuery_result typedOther = (transferRequestQuery_result) other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
						typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("transferRequestQuery_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
				ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class transferRequestQuery_resultStandardSchemeFactory implements
				SchemeFactory {
			public transferRequestQuery_resultStandardScheme getScheme() {
				return new transferRequestQuery_resultStandardScheme();
			}
		}

		private static class transferRequestQuery_resultStandardScheme extends
				StandardScheme<transferRequestQuery_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					transferRequestQuery_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.success = new R66Result();
								struct.success.read(iprot);
								struct.setSuccessIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
										schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					transferRequestQuery_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class transferRequestQuery_resultTupleSchemeFactory implements SchemeFactory {
			public transferRequestQuery_resultTupleScheme getScheme() {
				return new transferRequestQuery_resultTupleScheme();
			}
		}

		private static class transferRequestQuery_resultTupleScheme extends
				TupleScheme<transferRequestQuery_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					transferRequestQuery_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					transferRequestQuery_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new R66Result();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class infoTransferQuery_args implements
			org.apache.thrift.TBase<infoTransferQuery_args, infoTransferQuery_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"infoTransferQuery_args");

		private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"request", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new infoTransferQuery_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new infoTransferQuery_argsTupleSchemeFactory());
		}

		private R66Request request; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for finding and
		 * manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			REQUEST((short) 1, "request");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
					case 1: // REQUEST
						return REQUEST;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it is not
			 * found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.StructMetaData(
							org.apache.thrift.protocol.TType.STRUCT, R66Request.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					infoTransferQuery_args.class, metaDataMap);
		}

		public infoTransferQuery_args() {
		}

		public infoTransferQuery_args(
				R66Request request)
		{
			this();
			this.request = request;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public infoTransferQuery_args(infoTransferQuery_args other) {
			if (other.isSetRequest()) {
				this.request = new R66Request(other.request);
			}
		}

		public infoTransferQuery_args deepCopy() {
			return new infoTransferQuery_args(this);
		}

		@Override
		public void clear() {
			this.request = null;
		}

		public R66Request getRequest() {
			return this.request;
		}

		public infoTransferQuery_args setRequest(R66Request request) {
			this.request = request;
			return this;
		}

		public void unsetRequest() {
			this.request = null;
		}

		/** Returns true if field request is set (has been assigned a value) and false otherwise */
		public boolean isSetRequest() {
			return this.request != null;
		}

		public void setRequestIsSet(boolean value) {
			if (!value) {
				this.request = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
				case REQUEST:
					if (value == null) {
						unsetRequest();
					} else {
						setRequest((R66Request) value);
					}
					break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
				case REQUEST:
					return getRequest();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
				case REQUEST:
					return isSetRequest();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof infoTransferQuery_args)
				return this.equals((infoTransferQuery_args) that);
			return false;
		}

		public boolean equals(infoTransferQuery_args that) {
			if (that == null)
				return false;

			boolean this_present_request = true && this.isSetRequest();
			boolean that_present_request = true && that.isSetRequest();
			if (this_present_request || that_present_request) {
				if (!(this_present_request && that_present_request))
					return false;
				if (!this.request.equals(that.request))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		public int compareTo(infoTransferQuery_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;
			infoTransferQuery_args typedOther = (infoTransferQuery_args) other;

			lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRequest()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request,
						typedOther.request);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("infoTransferQuery_args(");
			boolean first = true;

			sb.append("request:");
			if (this.request == null) {
				sb.append("null");
			} else {
				sb.append(this.request);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (request != null) {
				request.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
				ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class infoTransferQuery_argsStandardSchemeFactory implements SchemeFactory {
			public infoTransferQuery_argsStandardScheme getScheme() {
				return new infoTransferQuery_argsStandardScheme();
			}
		}

		private static class infoTransferQuery_argsStandardScheme extends
				StandardScheme<infoTransferQuery_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					infoTransferQuery_args struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 1: // REQUEST
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.request = new R66Request();
								struct.request.read(iprot);
								struct.setRequestIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
										schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					infoTransferQuery_args struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.request != null) {
					oprot.writeFieldBegin(REQUEST_FIELD_DESC);
					struct.request.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class infoTransferQuery_argsTupleSchemeFactory implements SchemeFactory {
			public infoTransferQuery_argsTupleScheme getScheme() {
				return new infoTransferQuery_argsTupleScheme();
			}
		}

		private static class infoTransferQuery_argsTupleScheme extends
				TupleScheme<infoTransferQuery_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					infoTransferQuery_args struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetRequest()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetRequest()) {
					struct.request.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					infoTransferQuery_args struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.request = new R66Request();
					struct.request.read(iprot);
					struct.setRequestIsSet(true);
				}
			}
		}

	}

	public static class infoTransferQuery_result implements
			org.apache.thrift.TBase<infoTransferQuery_result, infoTransferQuery_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"infoTransferQuery_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new infoTransferQuery_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new infoTransferQuery_resultTupleSchemeFactory());
		}

		private R66Result success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for finding and
		 * manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
					case 0: // SUCCESS
						return SUCCESS;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it is not
			 * found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.StructMetaData(
							org.apache.thrift.protocol.TType.STRUCT, R66Result.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					infoTransferQuery_result.class, metaDataMap);
		}

		public infoTransferQuery_result() {
		}

		public infoTransferQuery_result(
				R66Result success)
		{
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public infoTransferQuery_result(infoTransferQuery_result other) {
			if (other.isSetSuccess()) {
				this.success = new R66Result(other.success);
			}
		}

		public infoTransferQuery_result deepCopy() {
			return new infoTransferQuery_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public R66Result getSuccess() {
			return this.success;
		}

		public infoTransferQuery_result setSuccess(R66Result success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
				case SUCCESS:
					if (value == null) {
						unsetSuccess();
					} else {
						setSuccess((R66Result) value);
					}
					break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
				case SUCCESS:
					return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
				case SUCCESS:
					return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof infoTransferQuery_result)
				return this.equals((infoTransferQuery_result) that);
			return false;
		}

		public boolean equals(infoTransferQuery_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		public int compareTo(infoTransferQuery_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;
			infoTransferQuery_result typedOther = (infoTransferQuery_result) other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
						typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("infoTransferQuery_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (success != null) {
				success.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
				ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class infoTransferQuery_resultStandardSchemeFactory implements SchemeFactory {
			public infoTransferQuery_resultStandardScheme getScheme() {
				return new infoTransferQuery_resultStandardScheme();
			}
		}

		private static class infoTransferQuery_resultStandardScheme extends
				StandardScheme<infoTransferQuery_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					infoTransferQuery_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.success = new R66Result();
								struct.success.read(iprot);
								struct.setSuccessIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
										schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					infoTransferQuery_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					struct.success.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class infoTransferQuery_resultTupleSchemeFactory implements SchemeFactory {
			public infoTransferQuery_resultTupleScheme getScheme() {
				return new infoTransferQuery_resultTupleScheme();
			}
		}

		private static class infoTransferQuery_resultTupleScheme extends
				TupleScheme<infoTransferQuery_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					infoTransferQuery_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					struct.success.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot,
					infoTransferQuery_result struct) throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = new R66Result();
					struct.success.read(iprot);
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class isStillRunning_args implements
			org.apache.thrift.TBase<isStillRunning_args, isStillRunning_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"isStillRunning_args");

		private static final org.apache.thrift.protocol.TField FROMUID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"fromuid", org.apache.thrift.protocol.TType.STRING, (short) 1);
		private static final org.apache.thrift.protocol.TField TOUID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"touid", org.apache.thrift.protocol.TType.STRING, (short) 2);
		private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"tid", org.apache.thrift.protocol.TType.I64, (short) 3);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new isStillRunning_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new isStillRunning_argsTupleSchemeFactory());
		}

		private String fromuid; // required
		private String touid; // required
		private long tid; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for finding and
		 * manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			FROMUID((short) 1, "fromuid"),
			TOUID((short) 2, "touid"),
			TID((short) 3, "tid");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
					case 1: // FROMUID
						return FROMUID;
					case 2: // TOUID
						return TOUID;
					case 3: // TID
						return TID;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it is not
			 * found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __TID_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.FROMUID, new org.apache.thrift.meta_data.FieldMetaData("fromuid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(
							org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.TOUID, new org.apache.thrift.meta_data.FieldMetaData("touid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(
							org.apache.thrift.protocol.TType.STRING)));
			tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(
							org.apache.thrift.protocol.TType.I64)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					isStillRunning_args.class, metaDataMap);
		}

		public isStillRunning_args() {
		}

		public isStillRunning_args(
				String fromuid,
				String touid,
				long tid)
		{
			this();
			this.fromuid = fromuid;
			this.touid = touid;
			this.tid = tid;
			setTidIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public isStillRunning_args(isStillRunning_args other) {
			__isset_bitfield = other.__isset_bitfield;
			if (other.isSetFromuid()) {
				this.fromuid = other.fromuid;
			}
			if (other.isSetTouid()) {
				this.touid = other.touid;
			}
			this.tid = other.tid;
		}

		public isStillRunning_args deepCopy() {
			return new isStillRunning_args(this);
		}

		@Override
		public void clear() {
			this.fromuid = null;
			this.touid = null;
			setTidIsSet(false);
			this.tid = 0;
		}

		public String getFromuid() {
			return this.fromuid;
		}

		public isStillRunning_args setFromuid(String fromuid) {
			this.fromuid = fromuid;
			return this;
		}

		public void unsetFromuid() {
			this.fromuid = null;
		}

		/** Returns true if field fromuid is set (has been assigned a value) and false otherwise */
		public boolean isSetFromuid() {
			return this.fromuid != null;
		}

		public void setFromuidIsSet(boolean value) {
			if (!value) {
				this.fromuid = null;
			}
		}

		public String getTouid() {
			return this.touid;
		}

		public isStillRunning_args setTouid(String touid) {
			this.touid = touid;
			return this;
		}

		public void unsetTouid() {
			this.touid = null;
		}

		/** Returns true if field touid is set (has been assigned a value) and false otherwise */
		public boolean isSetTouid() {
			return this.touid != null;
		}

		public void setTouidIsSet(boolean value) {
			if (!value) {
				this.touid = null;
			}
		}

		public long getTid() {
			return this.tid;
		}

		public isStillRunning_args setTid(long tid) {
			this.tid = tid;
			setTidIsSet(true);
			return this;
		}

		public void unsetTid() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TID_ISSET_ID);
		}

		/** Returns true if field tid is set (has been assigned a value) and false otherwise */
		public boolean isSetTid() {
			return EncodingUtils.testBit(__isset_bitfield, __TID_ISSET_ID);
		}

		public void setTidIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TID_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
				case FROMUID:
					if (value == null) {
						unsetFromuid();
					} else {
						setFromuid((String) value);
					}
					break;

				case TOUID:
					if (value == null) {
						unsetTouid();
					} else {
						setTouid((String) value);
					}
					break;

				case TID:
					if (value == null) {
						unsetTid();
					} else {
						setTid((Long) value);
					}
					break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
				case FROMUID:
					return getFromuid();

				case TOUID:
					return getTouid();

				case TID:
					return Long.valueOf(getTid());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
				case FROMUID:
					return isSetFromuid();
				case TOUID:
					return isSetTouid();
				case TID:
					return isSetTid();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof isStillRunning_args)
				return this.equals((isStillRunning_args) that);
			return false;
		}

		public boolean equals(isStillRunning_args that) {
			if (that == null)
				return false;

			boolean this_present_fromuid = true && this.isSetFromuid();
			boolean that_present_fromuid = true && that.isSetFromuid();
			if (this_present_fromuid || that_present_fromuid) {
				if (!(this_present_fromuid && that_present_fromuid))
					return false;
				if (!this.fromuid.equals(that.fromuid))
					return false;
			}

			boolean this_present_touid = true && this.isSetTouid();
			boolean that_present_touid = true && that.isSetTouid();
			if (this_present_touid || that_present_touid) {
				if (!(this_present_touid && that_present_touid))
					return false;
				if (!this.touid.equals(that.touid))
					return false;
			}

			boolean this_present_tid = true;
			boolean that_present_tid = true;
			if (this_present_tid || that_present_tid) {
				if (!(this_present_tid && that_present_tid))
					return false;
				if (this.tid != that.tid)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		public int compareTo(isStillRunning_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;
			isStillRunning_args typedOther = (isStillRunning_args) other;

			lastComparison = Boolean.valueOf(isSetFromuid()).compareTo(typedOther.isSetFromuid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetFromuid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromuid,
						typedOther.fromuid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetTouid()).compareTo(typedOther.isSetTouid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetTouid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.touid,
						typedOther.touid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = Boolean.valueOf(isSetTid()).compareTo(typedOther.isSetTid());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetTid()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, typedOther.tid);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("isStillRunning_args(");
			boolean first = true;

			sb.append("fromuid:");
			if (this.fromuid == null) {
				sb.append("null");
			} else {
				sb.append(this.fromuid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("touid:");
			if (this.touid == null) {
				sb.append("null");
			} else {
				sb.append(this.touid);
			}
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("tid:");
			sb.append(this.tid);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
				ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky,
				// and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class isStillRunning_argsStandardSchemeFactory implements SchemeFactory {
			public isStillRunning_argsStandardScheme getScheme() {
				return new isStillRunning_argsStandardScheme();
			}
		}

		private static class isStillRunning_argsStandardScheme extends
				StandardScheme<isStillRunning_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, isStillRunning_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 1: // FROMUID
							if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
								struct.fromuid = iprot.readString();
								struct.setFromuidIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
										schemeField.type);
							}
							break;
						case 2: // TOUID
							if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
								struct.touid = iprot.readString();
								struct.setTouidIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
										schemeField.type);
							}
							break;
						case 3: // TID
							if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
								struct.tid = iprot.readI64();
								struct.setTidIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
										schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, isStillRunning_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.fromuid != null) {
					oprot.writeFieldBegin(FROMUID_FIELD_DESC);
					oprot.writeString(struct.fromuid);
					oprot.writeFieldEnd();
				}
				if (struct.touid != null) {
					oprot.writeFieldBegin(TOUID_FIELD_DESC);
					oprot.writeString(struct.touid);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldBegin(TID_FIELD_DESC);
				oprot.writeI64(struct.tid);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class isStillRunning_argsTupleSchemeFactory implements SchemeFactory {
			public isStillRunning_argsTupleScheme getScheme() {
				return new isStillRunning_argsTupleScheme();
			}
		}

		private static class isStillRunning_argsTupleScheme extends
				TupleScheme<isStillRunning_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, isStillRunning_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetFromuid()) {
					optionals.set(0);
				}
				if (struct.isSetTouid()) {
					optionals.set(1);
				}
				if (struct.isSetTid()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetFromuid()) {
					oprot.writeString(struct.fromuid);
				}
				if (struct.isSetTouid()) {
					oprot.writeString(struct.touid);
				}
				if (struct.isSetTid()) {
					oprot.writeI64(struct.tid);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, isStillRunning_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.fromuid = iprot.readString();
					struct.setFromuidIsSet(true);
				}
				if (incoming.get(1)) {
					struct.touid = iprot.readString();
					struct.setTouidIsSet(true);
				}
				if (incoming.get(2)) {
					struct.tid = iprot.readI64();
					struct.setTidIsSet(true);
				}
			}
		}

	}

	public static class isStillRunning_result implements
			org.apache.thrift.TBase<isStillRunning_result, isStillRunning_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"isStillRunning_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new isStillRunning_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new isStillRunning_resultTupleSchemeFactory());
		}

		private boolean success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for finding and
		 * manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
					case 0: // SUCCESS
						return SUCCESS;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it is not
			 * found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(
							org.apache.thrift.protocol.TType.BOOL)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					isStillRunning_result.class, metaDataMap);
		}

		public isStillRunning_result() {
		}

		public isStillRunning_result(
				boolean success)
		{
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public isStillRunning_result(isStillRunning_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
		}

		public isStillRunning_result deepCopy() {
			return new isStillRunning_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public isStillRunning_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
				case SUCCESS:
					if (value == null) {
						unsetSuccess();
					} else {
						setSuccess((Boolean) value);
					}
					break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
				case SUCCESS:
					return Boolean.valueOf(isSuccess());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
				case SUCCESS:
					return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof isStillRunning_result)
				return this.equals((isStillRunning_result) that);
			return false;
		}

		public boolean equals(isStillRunning_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		public int compareTo(isStillRunning_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;
			isStillRunning_result typedOther = (isStillRunning_result) other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
						typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("isStillRunning_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
				ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is wacky,
				// and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class isStillRunning_resultStandardSchemeFactory implements SchemeFactory {
			public isStillRunning_resultStandardScheme getScheme() {
				return new isStillRunning_resultStandardScheme();
			}
		}

		private static class isStillRunning_resultStandardScheme extends
				StandardScheme<isStillRunning_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot,
					isStillRunning_result struct) throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
								struct.success = iprot.readBool();
								struct.setSuccessIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
										schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					isStillRunning_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeBool(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class isStillRunning_resultTupleSchemeFactory implements SchemeFactory {
			public isStillRunning_resultTupleScheme getScheme() {
				return new isStillRunning_resultTupleScheme();
			}
		}

		private static class isStillRunning_resultTupleScheme extends
				TupleScheme<isStillRunning_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot,
					isStillRunning_result struct) throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, isStillRunning_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class infoListQuery_args implements
			org.apache.thrift.TBase<infoListQuery_args, infoListQuery_args._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"infoListQuery_args");

		private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"request", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new infoListQuery_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new infoListQuery_argsTupleSchemeFactory());
		}

		private R66Request request; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for finding and
		 * manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			REQUEST((short) 1, "request");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
					case 1: // REQUEST
						return REQUEST;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it is not
			 * found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.StructMetaData(
							org.apache.thrift.protocol.TType.STRUCT, R66Request.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					infoListQuery_args.class, metaDataMap);
		}

		public infoListQuery_args() {
		}

		public infoListQuery_args(
				R66Request request)
		{
			this();
			this.request = request;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public infoListQuery_args(infoListQuery_args other) {
			if (other.isSetRequest()) {
				this.request = new R66Request(other.request);
			}
		}

		public infoListQuery_args deepCopy() {
			return new infoListQuery_args(this);
		}

		@Override
		public void clear() {
			this.request = null;
		}

		public R66Request getRequest() {
			return this.request;
		}

		public infoListQuery_args setRequest(R66Request request) {
			this.request = request;
			return this;
		}

		public void unsetRequest() {
			this.request = null;
		}

		/** Returns true if field request is set (has been assigned a value) and false otherwise */
		public boolean isSetRequest() {
			return this.request != null;
		}

		public void setRequestIsSet(boolean value) {
			if (!value) {
				this.request = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
				case REQUEST:
					if (value == null) {
						unsetRequest();
					} else {
						setRequest((R66Request) value);
					}
					break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
				case REQUEST:
					return getRequest();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
				case REQUEST:
					return isSetRequest();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof infoListQuery_args)
				return this.equals((infoListQuery_args) that);
			return false;
		}

		public boolean equals(infoListQuery_args that) {
			if (that == null)
				return false;

			boolean this_present_request = true && this.isSetRequest();
			boolean that_present_request = true && that.isSetRequest();
			if (this_present_request || that_present_request) {
				if (!(this_present_request && that_present_request))
					return false;
				if (!this.request.equals(that.request))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		public int compareTo(infoListQuery_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;
			infoListQuery_args typedOther = (infoListQuery_args) other;

			lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRequest()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request,
						typedOther.request);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("infoListQuery_args(");
			boolean first = true;

			sb.append("request:");
			if (this.request == null) {
				sb.append("null");
			} else {
				sb.append(this.request);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (request != null) {
				request.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
				ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class infoListQuery_argsStandardSchemeFactory implements SchemeFactory {
			public infoListQuery_argsStandardScheme getScheme() {
				return new infoListQuery_argsStandardScheme();
			}
		}

		private static class infoListQuery_argsStandardScheme extends
				StandardScheme<infoListQuery_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, infoListQuery_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 1: // REQUEST
							if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
								struct.request = new R66Request();
								struct.request.read(iprot);
								struct.setRequestIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
										schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, infoListQuery_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.request != null) {
					oprot.writeFieldBegin(REQUEST_FIELD_DESC);
					struct.request.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class infoListQuery_argsTupleSchemeFactory implements SchemeFactory {
			public infoListQuery_argsTupleScheme getScheme() {
				return new infoListQuery_argsTupleScheme();
			}
		}

		private static class infoListQuery_argsTupleScheme extends TupleScheme<infoListQuery_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, infoListQuery_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetRequest()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetRequest()) {
					struct.request.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, infoListQuery_args struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.request = new R66Request();
					struct.request.read(iprot);
					struct.setRequestIsSet(true);
				}
			}
		}

	}

	public static class infoListQuery_result implements
			org.apache.thrift.TBase<infoListQuery_result, infoListQuery_result._Fields>,
			java.io.Serializable, Cloneable {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"infoListQuery_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"success", org.apache.thrift.protocol.TType.LIST, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new infoListQuery_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new infoListQuery_resultTupleSchemeFactory());
		}

		private List<String> success; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for finding and
		 * manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
					case 0: // SUCCESS
						return SUCCESS;
					default:
						return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it is not
			 * found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.ListMetaData(
							org.apache.thrift.protocol.TType.LIST,
							new org.apache.thrift.meta_data.FieldValueMetaData(
									org.apache.thrift.protocol.TType.STRING))));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(
					infoListQuery_result.class, metaDataMap);
		}

		public infoListQuery_result() {
		}

		public infoListQuery_result(
				List<String> success)
		{
			this();
			this.success = success;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public infoListQuery_result(infoListQuery_result other) {
			if (other.isSetSuccess()) {
				List<String> __this__success = new ArrayList<String>();
				for (String other_element : other.success) {
					__this__success.add(other_element);
				}
				this.success = __this__success;
			}
		}

		public infoListQuery_result deepCopy() {
			return new infoListQuery_result(this);
		}

		@Override
		public void clear() {
			this.success = null;
		}

		public int getSuccessSize() {
			return (this.success == null) ? 0 : this.success.size();
		}

		public java.util.Iterator<String> getSuccessIterator() {
			return (this.success == null) ? null : this.success.iterator();
		}

		public void addToSuccess(String elem) {
			if (this.success == null) {
				this.success = new ArrayList<String>();
			}
			this.success.add(elem);
		}

		public List<String> getSuccess() {
			return this.success;
		}

		public infoListQuery_result setSuccess(List<String> success) {
			this.success = success;
			return this;
		}

		public void unsetSuccess() {
			this.success = null;
		}

		/** Returns true if field success is set (has been assigned a value) and false otherwise */
		public boolean isSetSuccess() {
			return this.success != null;
		}

		public void setSuccessIsSet(boolean value) {
			if (!value) {
				this.success = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
				case SUCCESS:
					if (value == null) {
						unsetSuccess();
					} else {
						setSuccess((List<String>) value);
					}
					break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
				case SUCCESS:
					return getSuccess();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
				case SUCCESS:
					return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof infoListQuery_result)
				return this.equals((infoListQuery_result) that);
			return false;
		}

		public boolean equals(infoListQuery_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && this.isSetSuccess();
			boolean that_present_success = true && that.isSetSuccess();
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		public int compareTo(infoListQuery_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;
			infoListQuery_result typedOther = (infoListQuery_result) other;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success,
						typedOther.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot)
				throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot)
				throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("infoListQuery_result(");
			boolean first = true;

			sb.append("success:");
			if (this.success == null) {
				sb.append("null");
			} else {
				sb.append(this.success);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
				ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class infoListQuery_resultStandardSchemeFactory implements SchemeFactory {
			public infoListQuery_resultStandardScheme getScheme() {
				return new infoListQuery_resultStandardScheme();
			}
		}

		private static class infoListQuery_resultStandardScheme extends
				StandardScheme<infoListQuery_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, infoListQuery_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true)
				{
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
						case 0: // SUCCESS
							if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
								{
									org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
									struct.success = new ArrayList<String>(_list0.size);
									for (int _i1 = 0; _i1 < _list0.size; ++_i1)
									{
										String _elem2; // required
										_elem2 = iprot.readString();
										struct.success.add(_elem2);
									}
									iprot.readListEnd();
								}
								struct.setSuccessIsSet(true);
							} else {
								org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
										schemeField.type);
							}
							break;
						default:
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot,
					infoListQuery_result struct) throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.success != null) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, struct.success.size()));
						for (String _iter3 : struct.success)
						{
							oprot.writeString(_iter3);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class infoListQuery_resultTupleSchemeFactory implements SchemeFactory {
			public infoListQuery_resultTupleScheme getScheme() {
				return new infoListQuery_resultTupleScheme();
			}
		}

		private static class infoListQuery_resultTupleScheme extends
				TupleScheme<infoListQuery_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, infoListQuery_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					{
						oprot.writeI32(struct.success.size());
						for (String _iter4 : struct.success)
						{
							oprot.writeString(_iter4);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, infoListQuery_result struct)
					throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRING, iprot.readI32());
						struct.success = new ArrayList<String>(_list5.size);
						for (int _i6 = 0; _i6 < _list5.size; ++_i6)
						{
							String _elem7; // required
							_elem7 = iprot.readString();
							struct.success.add(_elem7);
						}
					}
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

}
