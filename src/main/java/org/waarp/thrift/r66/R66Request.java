/**
 * Autogenerated by Thrift Compiler (0.9.0)
 * 
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * 
 * @generated
 */
package org.waarp.thrift.r66;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class R66Request implements org.apache.thrift.TBase<R66Request, R66Request._Fields>,
		java.io.Serializable, Cloneable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 5084190194755640723L;

	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"R66Request");

	private static final org.apache.thrift.protocol.TField MODE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"mode", org.apache.thrift.protocol.TType.I32, (short) 1);
	private static final org.apache.thrift.protocol.TField FROMUID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"fromuid", org.apache.thrift.protocol.TType.STRING, (short) 2);
	private static final org.apache.thrift.protocol.TField DESTUID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"destuid", org.apache.thrift.protocol.TType.STRING, (short) 3);
	private static final org.apache.thrift.protocol.TField FILE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"file", org.apache.thrift.protocol.TType.STRING, (short) 4);
	private static final org.apache.thrift.protocol.TField RULE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"rule", org.apache.thrift.protocol.TType.STRING, (short) 5);
	private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"info", org.apache.thrift.protocol.TType.STRING, (short) 10);
	private static final org.apache.thrift.protocol.TField MD5_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"md5", org.apache.thrift.protocol.TType.BOOL, (short) 11);
	private static final org.apache.thrift.protocol.TField BLOCKSIZE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"blocksize", org.apache.thrift.protocol.TType.I32, (short) 12);
	private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"start", org.apache.thrift.protocol.TType.STRING, (short) 13);
	private static final org.apache.thrift.protocol.TField DELAY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"delay", org.apache.thrift.protocol.TType.STRING, (short) 14);
	private static final org.apache.thrift.protocol.TField NOTRACE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"notrace", org.apache.thrift.protocol.TType.BOOL, (short) 15);
	private static final org.apache.thrift.protocol.TField TID_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"tid", org.apache.thrift.protocol.TType.I64, (short) 20);
	private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"action", org.apache.thrift.protocol.TType.I32, (short) 21);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new R66RequestStandardSchemeFactory());
		schemes.put(TupleScheme.class, new R66RequestTupleSchemeFactory());
	}

	private RequestMode mode; // required
	private String fromuid; // optional
	private String destuid; // optional
	private String file; // optional
	private String rule; // optional
	private String info; // optional
	private boolean md5; // optional
	private int blocksize; // optional
	private String start; // optional
	private String delay; // optional
	private boolean notrace; // optional
	private long tid; // optional
	private Action action; // optional

	/**
	 * The set of fields this struct contains, along with convenience methods for finding and
	 * manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		/**
		 * 
		 * @see RequestMode
		 */
		MODE((short) 1, "mode"),
		FROMUID((short) 2, "fromuid"),
		DESTUID((short) 3, "destuid"),
		FILE((short) 4, "file"),
		RULE((short) 5, "rule"),
		INFO((short) 10, "info"),
		MD5((short) 11, "md5"),
		BLOCKSIZE((short) 12, "blocksize"),
		START((short) 13, "start"),
		DELAY((short) 14, "delay"),
		NOTRACE((short) 15, "notrace"),
		TID((short) 20, "tid"),
		/**
		 * 
		 * @see Action
		 */
		ACTION((short) 21, "action");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
				case 1: // MODE
					return MODE;
				case 2: // FROMUID
					return FROMUID;
				case 3: // DESTUID
					return DESTUID;
				case 4: // FILE
					return FILE;
				case 5: // RULE
					return RULE;
				case 10: // INFO
					return INFO;
				case 11: // MD5
					return MD5;
				case 12: // BLOCKSIZE
					return BLOCKSIZE;
				case 13: // START
					return START;
				case 14: // DELAY
					return DELAY;
				case 15: // NOTRACE
					return NOTRACE;
				case 20: // TID
					return TID;
				case 21: // ACTION
					return ACTION;
				default:
					return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __MD5_ISSET_ID = 0;
	private static final int __BLOCKSIZE_ISSET_ID = 1;
	private static final int __NOTRACE_ISSET_ID = 2;
	private static final int __TID_ISSET_ID = 3;
	private byte __isset_bitfield = 0;
	private _Fields optionals[] = { _Fields.FROMUID, _Fields.DESTUID, _Fields.FILE, _Fields.RULE,
			_Fields.INFO, _Fields.MD5, _Fields.BLOCKSIZE, _Fields.START, _Fields.DELAY,
			_Fields.NOTRACE, _Fields.TID, _Fields.ACTION };
	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.MODE, new org.apache.thrift.meta_data.FieldMetaData("mode",
				org.apache.thrift.TFieldRequirementType.REQUIRED,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM,
						RequestMode.class)));
		tmpMap.put(_Fields.FROMUID, new org.apache.thrift.meta_data.FieldMetaData("fromuid",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DESTUID, new org.apache.thrift.meta_data.FieldMetaData("destuid",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.FILE, new org.apache.thrift.meta_data.FieldMetaData("file",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.RULE, new org.apache.thrift.meta_data.FieldMetaData("rule",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.INFO, new org.apache.thrift.meta_data.FieldMetaData("info",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.MD5, new org.apache.thrift.meta_data.FieldMetaData("md5",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.BLOCKSIZE, new org.apache.thrift.meta_data.FieldMetaData("blocksize",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.I32)));
		tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.DELAY, new org.apache.thrift.meta_data.FieldMetaData("delay",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.NOTRACE, new org.apache.thrift.meta_data.FieldMetaData("notrace",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.BOOL)));
		tmpMap.put(_Fields.TID, new org.apache.thrift.meta_data.FieldMetaData("tid",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.I64)));
		tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action",
				org.apache.thrift.TFieldRequirementType.OPTIONAL,
				new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM,
						Action.class)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(R66Request.class,
				metaDataMap);
	}

	public R66Request() {
		this.md5 = false;

		this.notrace = false;

	}

	public R66Request(
			RequestMode mode)
	{
		this();
		this.mode = mode;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public R66Request(R66Request other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetMode()) {
			this.mode = other.mode;
		}
		if (other.isSetFromuid()) {
			this.fromuid = other.fromuid;
		}
		if (other.isSetDestuid()) {
			this.destuid = other.destuid;
		}
		if (other.isSetFile()) {
			this.file = other.file;
		}
		if (other.isSetRule()) {
			this.rule = other.rule;
		}
		if (other.isSetInfo()) {
			this.info = other.info;
		}
		this.md5 = other.md5;
		this.blocksize = other.blocksize;
		if (other.isSetStart()) {
			this.start = other.start;
		}
		if (other.isSetDelay()) {
			this.delay = other.delay;
		}
		this.notrace = other.notrace;
		this.tid = other.tid;
		if (other.isSetAction()) {
			this.action = other.action;
		}
	}

	public R66Request deepCopy() {
		return new R66Request(this);
	}

	@Override
	public void clear() {
		this.mode = null;
		this.fromuid = null;
		this.destuid = null;
		this.file = null;
		this.rule = null;
		this.info = null;
		this.md5 = false;

		setBlocksizeIsSet(false);
		this.blocksize = 0;
		this.start = null;
		this.delay = null;
		this.notrace = false;

		setTidIsSet(false);
		this.tid = 0;
		this.action = null;
	}

	/**
	 * 
	 * @see RequestMode
	 */
	public RequestMode getMode() {
		return this.mode;
	}

	/**
	 * 
	 * @see RequestMode
	 */
	public R66Request setMode(RequestMode mode) {
		this.mode = mode;
		return this;
	}

	public void unsetMode() {
		this.mode = null;
	}

	/** Returns true if field mode is set (has been assigned a value) and false otherwise */
	public boolean isSetMode() {
		return this.mode != null;
	}

	public void setModeIsSet(boolean value) {
		if (!value) {
			this.mode = null;
		}
	}

	public String getFromuid() {
		return this.fromuid;
	}

	public R66Request setFromuid(String fromuid) {
		this.fromuid = fromuid;
		return this;
	}

	public void unsetFromuid() {
		this.fromuid = null;
	}

	/** Returns true if field fromuid is set (has been assigned a value) and false otherwise */
	public boolean isSetFromuid() {
		return this.fromuid != null;
	}

	public void setFromuidIsSet(boolean value) {
		if (!value) {
			this.fromuid = null;
		}
	}

	public String getDestuid() {
		return this.destuid;
	}

	public R66Request setDestuid(String destuid) {
		this.destuid = destuid;
		return this;
	}

	public void unsetDestuid() {
		this.destuid = null;
	}

	/** Returns true if field destuid is set (has been assigned a value) and false otherwise */
	public boolean isSetDestuid() {
		return this.destuid != null;
	}

	public void setDestuidIsSet(boolean value) {
		if (!value) {
			this.destuid = null;
		}
	}

	public String getFile() {
		return this.file;
	}

	public R66Request setFile(String file) {
		this.file = file;
		return this;
	}

	public void unsetFile() {
		this.file = null;
	}

	/** Returns true if field file is set (has been assigned a value) and false otherwise */
	public boolean isSetFile() {
		return this.file != null;
	}

	public void setFileIsSet(boolean value) {
		if (!value) {
			this.file = null;
		}
	}

	public String getRule() {
		return this.rule;
	}

	public R66Request setRule(String rule) {
		this.rule = rule;
		return this;
	}

	public void unsetRule() {
		this.rule = null;
	}

	/** Returns true if field rule is set (has been assigned a value) and false otherwise */
	public boolean isSetRule() {
		return this.rule != null;
	}

	public void setRuleIsSet(boolean value) {
		if (!value) {
			this.rule = null;
		}
	}

	public String getInfo() {
		return this.info;
	}

	public R66Request setInfo(String info) {
		this.info = info;
		return this;
	}

	public void unsetInfo() {
		this.info = null;
	}

	/** Returns true if field info is set (has been assigned a value) and false otherwise */
	public boolean isSetInfo() {
		return this.info != null;
	}

	public void setInfoIsSet(boolean value) {
		if (!value) {
			this.info = null;
		}
	}

	public boolean isMd5() {
		return this.md5;
	}

	public R66Request setMd5(boolean md5) {
		this.md5 = md5;
		setMd5IsSet(true);
		return this;
	}

	public void unsetMd5() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MD5_ISSET_ID);
	}

	/** Returns true if field md5 is set (has been assigned a value) and false otherwise */
	public boolean isSetMd5() {
		return EncodingUtils.testBit(__isset_bitfield, __MD5_ISSET_ID);
	}

	public void setMd5IsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MD5_ISSET_ID, value);
	}

	public int getBlocksize() {
		return this.blocksize;
	}

	public R66Request setBlocksize(int blocksize) {
		this.blocksize = blocksize;
		setBlocksizeIsSet(true);
		return this;
	}

	public void unsetBlocksize() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID);
	}

	/** Returns true if field blocksize is set (has been assigned a value) and false otherwise */
	public boolean isSetBlocksize() {
		return EncodingUtils.testBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID);
	}

	public void setBlocksizeIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCKSIZE_ISSET_ID, value);
	}

	public String getStart() {
		return this.start;
	}

	public R66Request setStart(String start) {
		this.start = start;
		return this;
	}

	public void unsetStart() {
		this.start = null;
	}

	/** Returns true if field start is set (has been assigned a value) and false otherwise */
	public boolean isSetStart() {
		return this.start != null;
	}

	public void setStartIsSet(boolean value) {
		if (!value) {
			this.start = null;
		}
	}

	public String getDelay() {
		return this.delay;
	}

	public R66Request setDelay(String delay) {
		this.delay = delay;
		return this;
	}

	public void unsetDelay() {
		this.delay = null;
	}

	/** Returns true if field delay is set (has been assigned a value) and false otherwise */
	public boolean isSetDelay() {
		return this.delay != null;
	}

	public void setDelayIsSet(boolean value) {
		if (!value) {
			this.delay = null;
		}
	}

	public boolean isNotrace() {
		return this.notrace;
	}

	public R66Request setNotrace(boolean notrace) {
		this.notrace = notrace;
		setNotraceIsSet(true);
		return this;
	}

	public void unsetNotrace() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NOTRACE_ISSET_ID);
	}

	/** Returns true if field notrace is set (has been assigned a value) and false otherwise */
	public boolean isSetNotrace() {
		return EncodingUtils.testBit(__isset_bitfield, __NOTRACE_ISSET_ID);
	}

	public void setNotraceIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NOTRACE_ISSET_ID, value);
	}

	public long getTid() {
		return this.tid;
	}

	public R66Request setTid(long tid) {
		this.tid = tid;
		setTidIsSet(true);
		return this;
	}

	public void unsetTid() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TID_ISSET_ID);
	}

	/** Returns true if field tid is set (has been assigned a value) and false otherwise */
	public boolean isSetTid() {
		return EncodingUtils.testBit(__isset_bitfield, __TID_ISSET_ID);
	}

	public void setTidIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TID_ISSET_ID, value);
	}

	/**
	 * 
	 * @see Action
	 */
	public Action getAction() {
		return this.action;
	}

	/**
	 * 
	 * @see Action
	 */
	public R66Request setAction(Action action) {
		this.action = action;
		return this;
	}

	public void unsetAction() {
		this.action = null;
	}

	/** Returns true if field action is set (has been assigned a value) and false otherwise */
	public boolean isSetAction() {
		return this.action != null;
	}

	public void setActionIsSet(boolean value) {
		if (!value) {
			this.action = null;
		}
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
			case MODE:
				if (value == null) {
					unsetMode();
				} else {
					setMode((RequestMode) value);
				}
				break;

			case FROMUID:
				if (value == null) {
					unsetFromuid();
				} else {
					setFromuid((String) value);
				}
				break;

			case DESTUID:
				if (value == null) {
					unsetDestuid();
				} else {
					setDestuid((String) value);
				}
				break;

			case FILE:
				if (value == null) {
					unsetFile();
				} else {
					setFile((String) value);
				}
				break;

			case RULE:
				if (value == null) {
					unsetRule();
				} else {
					setRule((String) value);
				}
				break;

			case INFO:
				if (value == null) {
					unsetInfo();
				} else {
					setInfo((String) value);
				}
				break;

			case MD5:
				if (value == null) {
					unsetMd5();
				} else {
					setMd5((Boolean) value);
				}
				break;

			case BLOCKSIZE:
				if (value == null) {
					unsetBlocksize();
				} else {
					setBlocksize((Integer) value);
				}
				break;

			case START:
				if (value == null) {
					unsetStart();
				} else {
					setStart((String) value);
				}
				break;

			case DELAY:
				if (value == null) {
					unsetDelay();
				} else {
					setDelay((String) value);
				}
				break;

			case NOTRACE:
				if (value == null) {
					unsetNotrace();
				} else {
					setNotrace((Boolean) value);
				}
				break;

			case TID:
				if (value == null) {
					unsetTid();
				} else {
					setTid((Long) value);
				}
				break;

			case ACTION:
				if (value == null) {
					unsetAction();
				} else {
					setAction((Action) value);
				}
				break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
			case MODE:
				return getMode();

			case FROMUID:
				return getFromuid();

			case DESTUID:
				return getDestuid();

			case FILE:
				return getFile();

			case RULE:
				return getRule();

			case INFO:
				return getInfo();

			case MD5:
				return Boolean.valueOf(isMd5());

			case BLOCKSIZE:
				return Integer.valueOf(getBlocksize());

			case START:
				return getStart();

			case DELAY:
				return getDelay();

			case NOTRACE:
				return Boolean.valueOf(isNotrace());

			case TID:
				return Long.valueOf(getTid());

			case ACTION:
				return getAction();

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
			case MODE:
				return isSetMode();
			case FROMUID:
				return isSetFromuid();
			case DESTUID:
				return isSetDestuid();
			case FILE:
				return isSetFile();
			case RULE:
				return isSetRule();
			case INFO:
				return isSetInfo();
			case MD5:
				return isSetMd5();
			case BLOCKSIZE:
				return isSetBlocksize();
			case START:
				return isSetStart();
			case DELAY:
				return isSetDelay();
			case NOTRACE:
				return isSetNotrace();
			case TID:
				return isSetTid();
			case ACTION:
				return isSetAction();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof R66Request)
			return this.equals((R66Request) that);
		return false;
	}

	public boolean equals(R66Request that) {
		if (that == null)
			return false;

		boolean this_present_mode = true && this.isSetMode();
		boolean that_present_mode = true && that.isSetMode();
		if (this_present_mode || that_present_mode) {
			if (!(this_present_mode && that_present_mode))
				return false;
			if (!this.mode.equals(that.mode))
				return false;
		}

		boolean this_present_fromuid = true && this.isSetFromuid();
		boolean that_present_fromuid = true && that.isSetFromuid();
		if (this_present_fromuid || that_present_fromuid) {
			if (!(this_present_fromuid && that_present_fromuid))
				return false;
			if (!this.fromuid.equals(that.fromuid))
				return false;
		}

		boolean this_present_destuid = true && this.isSetDestuid();
		boolean that_present_destuid = true && that.isSetDestuid();
		if (this_present_destuid || that_present_destuid) {
			if (!(this_present_destuid && that_present_destuid))
				return false;
			if (!this.destuid.equals(that.destuid))
				return false;
		}

		boolean this_present_file = true && this.isSetFile();
		boolean that_present_file = true && that.isSetFile();
		if (this_present_file || that_present_file) {
			if (!(this_present_file && that_present_file))
				return false;
			if (!this.file.equals(that.file))
				return false;
		}

		boolean this_present_rule = true && this.isSetRule();
		boolean that_present_rule = true && that.isSetRule();
		if (this_present_rule || that_present_rule) {
			if (!(this_present_rule && that_present_rule))
				return false;
			if (!this.rule.equals(that.rule))
				return false;
		}

		boolean this_present_info = true && this.isSetInfo();
		boolean that_present_info = true && that.isSetInfo();
		if (this_present_info || that_present_info) {
			if (!(this_present_info && that_present_info))
				return false;
			if (!this.info.equals(that.info))
				return false;
		}

		boolean this_present_md5 = true && this.isSetMd5();
		boolean that_present_md5 = true && that.isSetMd5();
		if (this_present_md5 || that_present_md5) {
			if (!(this_present_md5 && that_present_md5))
				return false;
			if (this.md5 != that.md5)
				return false;
		}

		boolean this_present_blocksize = true && this.isSetBlocksize();
		boolean that_present_blocksize = true && that.isSetBlocksize();
		if (this_present_blocksize || that_present_blocksize) {
			if (!(this_present_blocksize && that_present_blocksize))
				return false;
			if (this.blocksize != that.blocksize)
				return false;
		}

		boolean this_present_start = true && this.isSetStart();
		boolean that_present_start = true && that.isSetStart();
		if (this_present_start || that_present_start) {
			if (!(this_present_start && that_present_start))
				return false;
			if (!this.start.equals(that.start))
				return false;
		}

		boolean this_present_delay = true && this.isSetDelay();
		boolean that_present_delay = true && that.isSetDelay();
		if (this_present_delay || that_present_delay) {
			if (!(this_present_delay && that_present_delay))
				return false;
			if (!this.delay.equals(that.delay))
				return false;
		}

		boolean this_present_notrace = true && this.isSetNotrace();
		boolean that_present_notrace = true && that.isSetNotrace();
		if (this_present_notrace || that_present_notrace) {
			if (!(this_present_notrace && that_present_notrace))
				return false;
			if (this.notrace != that.notrace)
				return false;
		}

		boolean this_present_tid = true && this.isSetTid();
		boolean that_present_tid = true && that.isSetTid();
		if (this_present_tid || that_present_tid) {
			if (!(this_present_tid && that_present_tid))
				return false;
			if (this.tid != that.tid)
				return false;
		}

		boolean this_present_action = true && this.isSetAction();
		boolean that_present_action = true && that.isSetAction();
		if (this_present_action || that_present_action) {
			if (!(this_present_action && that_present_action))
				return false;
			if (!this.action.equals(that.action))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		return 0;
	}

	public int compareTo(R66Request other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;
		R66Request typedOther = (R66Request) other;

		lastComparison = Boolean.valueOf(isSetMode()).compareTo(typedOther.isSetMode());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMode()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mode, typedOther.mode);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetFromuid()).compareTo(typedOther.isSetFromuid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFromuid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromuid,
					typedOther.fromuid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDestuid()).compareTo(typedOther.isSetDestuid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDestuid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destuid,
					typedOther.destuid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetFile()).compareTo(typedOther.isSetFile());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetFile()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file, typedOther.file);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetRule()).compareTo(typedOther.isSetRule());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetRule()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rule, typedOther.rule);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetInfo()).compareTo(typedOther.isSetInfo());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetInfo()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info, typedOther.info);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetMd5()).compareTo(typedOther.isSetMd5());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetMd5()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.md5, typedOther.md5);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetBlocksize()).compareTo(typedOther.isSetBlocksize());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetBlocksize()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blocksize,
					typedOther.blocksize);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetStart()).compareTo(typedOther.isSetStart());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetStart()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, typedOther.start);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetDelay()).compareTo(typedOther.isSetDelay());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetDelay()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delay, typedOther.delay);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetNotrace()).compareTo(typedOther.isSetNotrace());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetNotrace()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notrace,
					typedOther.notrace);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTid()).compareTo(typedOther.isSetTid());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTid()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tid, typedOther.tid);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetAction()).compareTo(typedOther.isSetAction());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAction()) {
			lastComparison = org.apache.thrift.TBaseHelper
					.compareTo(this.action, typedOther.action);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot)
			throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot)
			throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("R66Request(");
		boolean first = true;

		sb.append("mode:");
		if (this.mode == null) {
			sb.append("null");
		} else {
			sb.append(this.mode);
		}
		first = false;
		if (isSetFromuid()) {
			if (!first)
				sb.append(", ");
			sb.append("fromuid:");
			if (this.fromuid == null) {
				sb.append("null");
			} else {
				sb.append(this.fromuid);
			}
			first = false;
		}
		if (isSetDestuid()) {
			if (!first)
				sb.append(", ");
			sb.append("destuid:");
			if (this.destuid == null) {
				sb.append("null");
			} else {
				sb.append(this.destuid);
			}
			first = false;
		}
		if (isSetFile()) {
			if (!first)
				sb.append(", ");
			sb.append("file:");
			if (this.file == null) {
				sb.append("null");
			} else {
				sb.append(this.file);
			}
			first = false;
		}
		if (isSetRule()) {
			if (!first)
				sb.append(", ");
			sb.append("rule:");
			if (this.rule == null) {
				sb.append("null");
			} else {
				sb.append(this.rule);
			}
			first = false;
		}
		if (isSetInfo()) {
			if (!first)
				sb.append(", ");
			sb.append("info:");
			if (this.info == null) {
				sb.append("null");
			} else {
				sb.append(this.info);
			}
			first = false;
		}
		if (isSetMd5()) {
			if (!first)
				sb.append(", ");
			sb.append("md5:");
			sb.append(this.md5);
			first = false;
		}
		if (isSetBlocksize()) {
			if (!first)
				sb.append(", ");
			sb.append("blocksize:");
			sb.append(this.blocksize);
			first = false;
		}
		if (isSetStart()) {
			if (!first)
				sb.append(", ");
			sb.append("start:");
			if (this.start == null) {
				sb.append("null");
			} else {
				sb.append(this.start);
			}
			first = false;
		}
		if (isSetDelay()) {
			if (!first)
				sb.append(", ");
			sb.append("delay:");
			if (this.delay == null) {
				sb.append("null");
			} else {
				sb.append(this.delay);
			}
			first = false;
		}
		if (isSetNotrace()) {
			if (!first)
				sb.append(", ");
			sb.append("notrace:");
			sb.append(this.notrace);
			first = false;
		}
		if (isSetTid()) {
			if (!first)
				sb.append(", ");
			sb.append("tid:");
			sb.append(this.tid);
			first = false;
		}
		if (isSetAction()) {
			if (!first)
				sb.append(", ");
			sb.append("action:");
			if (this.action == null) {
				sb.append("null");
			} else {
				sb.append(this.action);
			}
			first = false;
		}
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		if (mode == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'mode' was not present! Struct: " + toString());
		}
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException,
			ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java serialization is wacky, and
			// doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class R66RequestStandardSchemeFactory implements SchemeFactory {
		public R66RequestStandardScheme getScheme() {
			return new R66RequestStandardScheme();
		}
	}

	private static class R66RequestStandardScheme extends StandardScheme<R66Request> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, R66Request struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true)
			{
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
					case 1: // MODE
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.mode = RequestMode.findByValue(iprot.readI32());
							struct.setModeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // FROMUID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.fromuid = iprot.readString();
							struct.setFromuidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // DESTUID
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.destuid = iprot.readString();
							struct.setDestuidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 4: // FILE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.file = iprot.readString();
							struct.setFileIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 5: // RULE
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.rule = iprot.readString();
							struct.setRuleIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 10: // INFO
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.info = iprot.readString();
							struct.setInfoIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 11: // MD5
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.md5 = iprot.readBool();
							struct.setMd5IsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 12: // BLOCKSIZE
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.blocksize = iprot.readI32();
							struct.setBlocksizeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 13: // START
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.start = iprot.readString();
							struct.setStartIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 14: // DELAY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.delay = iprot.readString();
							struct.setDelayIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 15: // NOTRACE
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.notrace = iprot.readBool();
							struct.setNotraceIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 20: // TID
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.tid = iprot.readI64();
							struct.setTidIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 21: // ACTION
						if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
							struct.action = Action.findByValue(iprot.readI32());
							struct.setActionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the validate
			// method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, R66Request struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.mode != null) {
				oprot.writeFieldBegin(MODE_FIELD_DESC);
				oprot.writeI32(struct.mode.getValue());
				oprot.writeFieldEnd();
			}
			if (struct.fromuid != null) {
				if (struct.isSetFromuid()) {
					oprot.writeFieldBegin(FROMUID_FIELD_DESC);
					oprot.writeString(struct.fromuid);
					oprot.writeFieldEnd();
				}
			}
			if (struct.destuid != null) {
				if (struct.isSetDestuid()) {
					oprot.writeFieldBegin(DESTUID_FIELD_DESC);
					oprot.writeString(struct.destuid);
					oprot.writeFieldEnd();
				}
			}
			if (struct.file != null) {
				if (struct.isSetFile()) {
					oprot.writeFieldBegin(FILE_FIELD_DESC);
					oprot.writeString(struct.file);
					oprot.writeFieldEnd();
				}
			}
			if (struct.rule != null) {
				if (struct.isSetRule()) {
					oprot.writeFieldBegin(RULE_FIELD_DESC);
					oprot.writeString(struct.rule);
					oprot.writeFieldEnd();
				}
			}
			if (struct.info != null) {
				if (struct.isSetInfo()) {
					oprot.writeFieldBegin(INFO_FIELD_DESC);
					oprot.writeString(struct.info);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetMd5()) {
				oprot.writeFieldBegin(MD5_FIELD_DESC);
				oprot.writeBool(struct.md5);
				oprot.writeFieldEnd();
			}
			if (struct.isSetBlocksize()) {
				oprot.writeFieldBegin(BLOCKSIZE_FIELD_DESC);
				oprot.writeI32(struct.blocksize);
				oprot.writeFieldEnd();
			}
			if (struct.start != null) {
				if (struct.isSetStart()) {
					oprot.writeFieldBegin(START_FIELD_DESC);
					oprot.writeString(struct.start);
					oprot.writeFieldEnd();
				}
			}
			if (struct.delay != null) {
				if (struct.isSetDelay()) {
					oprot.writeFieldBegin(DELAY_FIELD_DESC);
					oprot.writeString(struct.delay);
					oprot.writeFieldEnd();
				}
			}
			if (struct.isSetNotrace()) {
				oprot.writeFieldBegin(NOTRACE_FIELD_DESC);
				oprot.writeBool(struct.notrace);
				oprot.writeFieldEnd();
			}
			if (struct.isSetTid()) {
				oprot.writeFieldBegin(TID_FIELD_DESC);
				oprot.writeI64(struct.tid);
				oprot.writeFieldEnd();
			}
			if (struct.action != null) {
				if (struct.isSetAction()) {
					oprot.writeFieldBegin(ACTION_FIELD_DESC);
					oprot.writeI32(struct.action.getValue());
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class R66RequestTupleSchemeFactory implements SchemeFactory {
		public R66RequestTupleScheme getScheme() {
			return new R66RequestTupleScheme();
		}
	}

	private static class R66RequestTupleScheme extends TupleScheme<R66Request> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, R66Request struct)
				throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			oprot.writeI32(struct.mode.getValue());
			BitSet optionals = new BitSet();
			if (struct.isSetFromuid()) {
				optionals.set(0);
			}
			if (struct.isSetDestuid()) {
				optionals.set(1);
			}
			if (struct.isSetFile()) {
				optionals.set(2);
			}
			if (struct.isSetRule()) {
				optionals.set(3);
			}
			if (struct.isSetInfo()) {
				optionals.set(4);
			}
			if (struct.isSetMd5()) {
				optionals.set(5);
			}
			if (struct.isSetBlocksize()) {
				optionals.set(6);
			}
			if (struct.isSetStart()) {
				optionals.set(7);
			}
			if (struct.isSetDelay()) {
				optionals.set(8);
			}
			if (struct.isSetNotrace()) {
				optionals.set(9);
			}
			if (struct.isSetTid()) {
				optionals.set(10);
			}
			if (struct.isSetAction()) {
				optionals.set(11);
			}
			oprot.writeBitSet(optionals, 12);
			if (struct.isSetFromuid()) {
				oprot.writeString(struct.fromuid);
			}
			if (struct.isSetDestuid()) {
				oprot.writeString(struct.destuid);
			}
			if (struct.isSetFile()) {
				oprot.writeString(struct.file);
			}
			if (struct.isSetRule()) {
				oprot.writeString(struct.rule);
			}
			if (struct.isSetInfo()) {
				oprot.writeString(struct.info);
			}
			if (struct.isSetMd5()) {
				oprot.writeBool(struct.md5);
			}
			if (struct.isSetBlocksize()) {
				oprot.writeI32(struct.blocksize);
			}
			if (struct.isSetStart()) {
				oprot.writeString(struct.start);
			}
			if (struct.isSetDelay()) {
				oprot.writeString(struct.delay);
			}
			if (struct.isSetNotrace()) {
				oprot.writeBool(struct.notrace);
			}
			if (struct.isSetTid()) {
				oprot.writeI64(struct.tid);
			}
			if (struct.isSetAction()) {
				oprot.writeI32(struct.action.getValue());
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, R66Request struct)
				throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			struct.mode = RequestMode.findByValue(iprot.readI32());
			struct.setModeIsSet(true);
			BitSet incoming = iprot.readBitSet(12);
			if (incoming.get(0)) {
				struct.fromuid = iprot.readString();
				struct.setFromuidIsSet(true);
			}
			if (incoming.get(1)) {
				struct.destuid = iprot.readString();
				struct.setDestuidIsSet(true);
			}
			if (incoming.get(2)) {
				struct.file = iprot.readString();
				struct.setFileIsSet(true);
			}
			if (incoming.get(3)) {
				struct.rule = iprot.readString();
				struct.setRuleIsSet(true);
			}
			if (incoming.get(4)) {
				struct.info = iprot.readString();
				struct.setInfoIsSet(true);
			}
			if (incoming.get(5)) {
				struct.md5 = iprot.readBool();
				struct.setMd5IsSet(true);
			}
			if (incoming.get(6)) {
				struct.blocksize = iprot.readI32();
				struct.setBlocksizeIsSet(true);
			}
			if (incoming.get(7)) {
				struct.start = iprot.readString();
				struct.setStartIsSet(true);
			}
			if (incoming.get(8)) {
				struct.delay = iprot.readString();
				struct.setDelayIsSet(true);
			}
			if (incoming.get(9)) {
				struct.notrace = iprot.readBool();
				struct.setNotraceIsSet(true);
			}
			if (incoming.get(10)) {
				struct.tid = iprot.readI64();
				struct.setTidIsSet(true);
			}
			if (incoming.get(11)) {
				struct.action = Action.findByValue(iprot.readI32());
				struct.setActionIsSet(true);
			}
		}
	}

}
